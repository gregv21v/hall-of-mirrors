/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/Game.js":
/*!************************!*\
  !*** ./src/js/Game.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Game)\n/* harmony export */ });\n/* harmony import */ var _scenes_MainScene__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scenes/MainScene */ \"./src/js/scenes/MainScene.js\");\n/* harmony import */ var _scenes_WelcomeScene__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scenes/WelcomeScene */ \"./src/js/scenes/WelcomeScene.js\");\n\r\n\r\n\r\nclass Game {\r\n    constructor() {\r\n        // create the canvas \r\n        let canvas = document.querySelector('canvas');\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n        this._context = canvas.getContext('2d');\r\n    \r\n        // add the scenes\r\n        this._scenes = [new _scenes_WelcomeScene__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this, this._context), new _scenes_MainScene__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this, this._context)];\r\n        this._currentSceneIndex = 0;\r\n\r\n        this.setupCurrentScene();\r\n\r\n        console.log(this.currentScene);\r\n    }\r\n\r\n\r\n    /** \r\n     * setupCurrentScene() \r\n     * @description sets the current scene up\r\n     */\r\n    setupCurrentScene() {\r\n        this.currentScene.create();\r\n        this.currentScene.draw(this._context);\r\n\r\n        let self = this;\r\n        window.addEventListener('keydown', (event) => {\r\n            self.currentScene.onKeyDown(event)\r\n        });\r\n\r\n        window.addEventListener('keyup', (event) => {\r\n            self.currentScene.onKeyUp(event)\r\n        });\r\n\r\n        window.addEventListener('mousedown', (event) => {\r\n            self.currentScene.onMouseDown(event)\r\n        });\r\n\r\n        window.addEventListener('mouseup', (event) => {\r\n            self.currentScene.onMouseUp(event)\r\n        });\r\n  \r\n        window.addEventListener('click', (event) => {\r\n            self.currentScene.onMouseClick(event)\r\n        });\r\n    \r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * nextScene()\r\n     * @description sets the current scene to the next scene\r\n     */\r\n    nextScene() { \r\n        this._currentSceneIndex = (this._currentSceneIndex + 1) % this._scenes.length;\r\n\r\n        this.setupCurrentScene();\r\n    }\r\n\r\n\r\n    /**\r\n     * getCurrentScene()\r\n     * @description gets the current scene\r\n     */\r\n    get currentScene() {\r\n        return this._scenes[this._currentSceneIndex];\r\n    }\r\n\r\n  \r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/Game.js?");

/***/ }),

/***/ "./src/js/Player.js":
/*!**************************!*\
  !*** ./src/js/Player.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Player)\n/* harmony export */ });\n/* harmony import */ var _shapes_Circle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shapes/Circle */ \"./src/js/shapes/Circle.js\");\n\r\n\r\nclass Player extends _shapes_Circle__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n\r\n\r\n    /**\r\n     * constructor()\r\n     * @description constructs the player \r\n     * @param {Point} center the center of the circle\r\n     * @param {Point} radius the radius of the circle\r\n     */\r\n    constructor(center, radius) {\r\n        super(center, radius);\r\n        this._fill.color = \"red\"\r\n        this._stroke.color = \"red\"\r\n    }\r\n\r\n    createImage() {\r\n        let image = new _shapes_Circle__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({...this._position}, this._radius);\r\n\t\timage.fill.color = this._fill.color;\r\n        image.stroke.color = this._stroke.color;\r\n\t\treturn image;\r\n    }\r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/Player.js?");

/***/ }),

/***/ "./src/js/distortions/Distortion.js":
/*!******************************************!*\
  !*** ./src/js/distortions/Distortion.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Distortion)\n/* harmony export */ });\n\r\n\r\n/**\r\n * Distortion - a change in the room that indicates to the player\r\n *  that they are closer to the end of the maze\r\n */\r\nclass Distortion {\r\n\r\n    /**\r\n     * apply()\r\n     * @description apply this distortion\r\n     * @param {Mirror} mirror the mirror to apply to\r\n     * @param {Group} group the group in the mirror to apply to\r\n     */\r\n    apply(mirror, group) {\r\n        return group;\r\n    }\r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/distortions/Distortion.js?");

/***/ }),

/***/ "./src/js/distortions/FillDistortion.js":
/*!**********************************************!*\
  !*** ./src/js/distortions/FillDistortion.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FillDistortion)\n/* harmony export */ });\n/* harmony import */ var _Distortion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Distortion */ \"./src/js/distortions/Distortion.js\");\n\r\n\r\n/**\r\n * FillDistortion - a distortion that effects fill colors of objects in mirrors\r\n */\r\nclass FillDistortion extends _Distortion__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n\r\n    /**\r\n     * constructor()\r\n     * @param {Color} fill the fill color to change to  \r\n     */\r\n    constructor(fill) {\r\n        super();\r\n        this._fill = fill;\r\n    }\r\n\r\n\r\n    /**\r\n     * apply()\r\n     * @description apply this distortion\r\n     * @param {Mirror} mirror the mirror to apply to\r\n     * @param {Group} group the group in the mirror to apply to\r\n     */\r\n    apply(mirror, group) {\r\n        if(group) group.objects[\"player\"].fill.color = this._fill;\r\n        return group;\r\n    }\r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/distortions/FillDistortion.js?");

/***/ }),

/***/ "./src/js/distortions/RectangleDistortion.js":
/*!***************************************************!*\
  !*** ./src/js/distortions/RectangleDistortion.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RectangleDistortion)\n/* harmony export */ });\n/* harmony import */ var _shapes_Group__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shapes/Group */ \"./src/js/shapes/Group.js\");\n/* harmony import */ var _shapes_Circle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shapes/Circle */ \"./src/js/shapes/Circle.js\");\n/* harmony import */ var _shapes_Rectangle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shapes/Rectangle */ \"./src/js/shapes/Rectangle.js\");\n/* harmony import */ var _Distortion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Distortion */ \"./src/js/distortions/Distortion.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * RectangleDistortion - a distortion that effects size of objects in mirrors\r\n */\r\nclass RectangleDistortion extends _Distortion__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\r\n\r\n    /**\r\n     * constructor()\r\n     * @param {Color} color the color to change to  \r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n\r\n    /**\r\n     * apply()\r\n     * @description apply this distortion\r\n     * @param {Mirror} mirror the mirror to apply to\r\n     * @param {Group} group the group in the mirror to apply to\r\n     */\r\n    apply(mirror, group) {\r\n        if(group == null) return group;\r\n\r\n        let player = group.objects[\"player\"];\r\n        console.log(player);\r\n        let rect = new _shapes_Rectangle__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\r\n            {x: group.center.x - player.radius, y: group.center.y - player.radius},\r\n            player.radius * 2, player.radius * 2\r\n        )\r\n        rect.fill = player.fill;\r\n        rect.stroke = player.stroke;\r\n        group.add(rect, \"rectangle\")\r\n    }\r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/distortions/RectangleDistortion.js?");

/***/ }),

/***/ "./src/js/distortions/ShadowDistortion.js":
/*!************************************************!*\
  !*** ./src/js/distortions/ShadowDistortion.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ShadowDistortion)\n/* harmony export */ });\n/* harmony import */ var _shapes_Circle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shapes/Circle */ \"./src/js/shapes/Circle.js\");\n/* harmony import */ var _shapes_Group__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shapes/Group */ \"./src/js/shapes/Group.js\");\n/* harmony import */ var _shapes_Rectangle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shapes/Rectangle */ \"./src/js/shapes/Rectangle.js\");\n/* harmony import */ var _Distortion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Distortion */ \"./src/js/distortions/Distortion.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * ShadowDistortion - a distortion that effects size of objects in mirrors\r\n */\r\nclass ShadowDistortion extends _Distortion__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\r\n\r\n    /**\r\n     * constructor()\r\n     * @param {Color} color the color to change to  \r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n\r\n    /**\r\n     * apply()\r\n     * @description apply this distortion\r\n     * @param {Mirror} mirror the mirror to apply to\r\n     * @param {Group} group the group in the mirror to apply to\r\n     */\r\n    apply(mirror, group) {\r\n        if(group == null) return group;\r\n\r\n        let player = group.objects[\"player\"];\r\n        let shadow = new _shapes_Circle__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\r\n            {x: player.x - player.radius * 2, y: player.y - player.radius * 2},\r\n            player.radius\r\n        )\r\n        shadow.fill.color = \"black\";\r\n        shadow.stroke.color = \"black\";\r\n        group.drawOrder = [\"shadow\", \"player\"]\r\n        group.add(shadow, \"shadow\")\r\n\r\n        console.log(group);\r\n    }\r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/distortions/ShadowDistortion.js?");

/***/ }),

/***/ "./src/js/distortions/SizeDistortion.js":
/*!**********************************************!*\
  !*** ./src/js/distortions/SizeDistortion.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SizeDistortion)\n/* harmony export */ });\n/* harmony import */ var _Distortion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Distortion */ \"./src/js/distortions/Distortion.js\");\n\r\n\r\n\r\n\r\n/**\r\n * SizeDistortion - a distortion that effects size of objects in mirrors\r\n */\r\nclass SizeDistortion extends _Distortion__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n\r\n    /**\r\n     * constructor()\r\n     * @param {Color} color the color to change to  \r\n     */\r\n    constructor(sizeMultiplier) {\r\n        super();\r\n        this._sizeMultiplier = sizeMultiplier;\r\n    }\r\n\r\n\r\n    /**\r\n     * apply()\r\n     * @description apply this distortion\r\n     * @param {Mirror} mirror the mirror to apply to\r\n     * @param {Group} group the group in the mirror to apply to\r\n     */\r\n    apply(mirror, group) {\r\n        if(group) group.scale(this._sizeMultiplier);\r\n        return group;\r\n    }\r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/distortions/SizeDistortion.js?");

/***/ }),

/***/ "./src/js/distortions/StarDistortion.js":
/*!**********************************************!*\
  !*** ./src/js/distortions/StarDistortion.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ StarDistortion)\n/* harmony export */ });\n/* harmony import */ var _shapes_Circle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shapes/Circle */ \"./src/js/shapes/Circle.js\");\n/* harmony import */ var _shapes_Rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shapes/Rectangle */ \"./src/js/shapes/Rectangle.js\");\n/* harmony import */ var _shapes_Star__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shapes/Star */ \"./src/js/shapes/Star.js\");\n/* harmony import */ var _Distortion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Distortion */ \"./src/js/distortions/Distortion.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * StarDistortion - a distortion that effects size of objects in mirrors\r\n */\r\nclass StarDistortion extends _Distortion__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\r\n\r\n    /**\r\n     * constructor()\r\n     * @param {Color} color the color to change to  \r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n\r\n    /**\r\n     * apply()\r\n     * @description apply this distortion\r\n     * @param {Mirror} mirror the mirror to apply to\r\n     * @param {Group} group the group in the mirror to apply to\r\n     */\r\n    apply(mirror, group) {\r\n        if(image == null) return null;\r\n\r\n        let player = group.objects[\"player\"];\r\n        let star = new _shapes_Star__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\r\n            {...player.position},\r\n            5, player.radius / 2,\r\n            player.radius\r\n        )\r\n\r\n        star.fill = player.fill;\r\n        star.stroke = player.stroke;\r\n\r\n        group.add(star, \"star\")\r\n    }\r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/distortions/StarDistortion.js?");

/***/ }),

/***/ "./src/js/distortions/StrokeDistortion.js":
/*!************************************************!*\
  !*** ./src/js/distortions/StrokeDistortion.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ StrokeDistortion)\n/* harmony export */ });\n/* harmony import */ var _Distortion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Distortion */ \"./src/js/distortions/Distortion.js\");\n\r\n\r\n/**\r\n * StrokeDistortion - a distortion that effects stoke colors of objects in mirrors\r\n */\r\nclass StrokeDistortion extends _Distortion__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n\r\n    /**\r\n     * constructor()\r\n     * @param {Color} color the color to change to  \r\n     */\r\n    constructor(color) {\r\n        super();\r\n        this._color = color;\r\n    }\r\n\r\n\r\n    /**\r\n     * apply()\r\n     * @description apply this distortion\r\n     * @param {Mirror} mirror the mirror to apply to\r\n     * @param {Group} group the group in the mirror to apply to\r\n     */\r\n    apply(mirror, group) {\r\n        if(group) group.objects[\"player\"].stroke.color = this._color;\r\n        return group;\r\n    }\r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/distortions/StrokeDistortion.js?");

/***/ }),

/***/ "./src/js/gui/Button.js":
/*!******************************!*\
  !*** ./src/js/gui/Button.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Button)\n/* harmony export */ });\n/* harmony import */ var _shapes_Rectangle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shapes/Rectangle */ \"./src/js/shapes/Rectangle.js\");\n\r\n\r\nclass Button extends _shapes_Rectangle__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n\r\n    constructor(position, width, height, label) {\r\n        super(position, width, height);\r\n        this._label = label;\r\n    }\r\n\r\n\r\n    /**\r\n     * onMouseDown()\r\n     * @description called when the mouse is pressed\r\n     * @param {MouseEvent} event the mouse event\r\n     */\r\n    onMouseDown(event) {}\r\n\r\n\r\n    /**\r\n     * onMouseUp()\r\n     * @description called when the mouse is released\r\n     * @param {MouseEvent} event the mouse event\r\n     */\r\n    onMouseUp(event) {\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * onClick()\r\n     * @description the function that is called when this button is clicked\r\n     */\r\n    onClick() {\r\n        console.log(\"Button clicked\");\r\n    }\r\n\r\n\r\n    /**\r\n     * draw() \r\n     * @description draws the mirror\r\n     * @param {CanvasRenderingContext2D} context the context to draw\r\n     */\r\n    draw(context) {\r\n        super.draw(context);\r\n        \r\n        context.fillStyle = \"black\";\r\n        context.textAlign = 'center';\r\n        context.textBaseline = 'middle';\r\n        context.font = \"20px Arial\";\r\n        context.fillText(this._label, this._position.x + this._width / 2, this._position.y + this._height / 2)\r\n    }\r\n\r\n\r\n    /**\r\n\t * get label()\r\n\t * @description gets the label of the button\r\n\t * @returns the label of the button \r\n\t */\r\n\tget label() {\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * set label()\r\n\t * @description sets the label of the button\r\n\t * @param {String} value the value to set the label to\r\n\t */\r\n\tset label(value) {\r\n\t\tthis._label = value;\r\n\t}\r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/gui/Button.js?");

/***/ }),

/***/ "./src/js/gui/StartButton.js":
/*!***********************************!*\
  !*** ./src/js/gui/StartButton.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ StartButton)\n/* harmony export */ });\n/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Button */ \"./src/js/gui/Button.js\");\n\r\n\r\nclass StartButton extends _Button__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n\r\n    constructor(position, width, height, label) {\r\n        super(position, width, height);\r\n        this._label = label;\r\n    }\r\n\r\n\r\n    /**\r\n     * onMouseDown()\r\n     * @description called when the mouse is pressed\r\n     * @param {Event} event the mouse event\r\n     */\r\n    onMouseDown(event) {\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * onClick()\r\n     * @description the function that is called when this button is clicked\r\n     */\r\n    onClick() {\r\n        console.log(\"Button clicked\");\r\n    }\r\n\r\n    /**\r\n\t * get label()\r\n\t * @description gets the label of the button\r\n\t * @returns the label of the button \r\n\t */\r\n\tget label() {\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * set label()\r\n\t * @description sets the label of the button\r\n\t * @param {String} value the value to set the label to\r\n\t */\r\n\tset label(value) {\r\n\t\tthis._label = value;\r\n\t}\r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/gui/StartButton.js?");

/***/ }),

/***/ "./src/js/rooms/Door.js":
/*!******************************!*\
  !*** ./src/js/rooms/Door.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Door)\n/* harmony export */ });\n/* harmony import */ var _shapes_Group__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shapes/Group */ \"./src/js/shapes/Group.js\");\n/* harmony import */ var _shapes_Rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shapes/Rectangle */ \"./src/js/shapes/Rectangle.js\");\n\r\n\r\n\r\nclass Door extends _shapes_Group__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n\r\n    \r\n    /**\r\n     * constructor()\r\n     * @description constructs the Mirror\r\n     * @param {Room} room the room the Mirror is in\r\n     * @param {Point} position the position of the Mirror, top left corner\r\n     * @param {Number} width the width of the Mirror\r\n     * @param {Number} height the height of the Mirror\r\n     */\r\n    constructor(room, position, width, height) {\r\n        super()\r\n\r\n        this._position = position;\r\n        this._width = width;\r\n        this._height = height;\r\n        this._room = room;\r\n        this._connectedRoom = undefined;\r\n        \r\n        this._base = new _shapes_Rectangle__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\r\n            position, width, height\r\n        )\r\n\r\n        this.add(this._base, \"base\");\r\n        \r\n        this._base.fill.color = \"rgb(102, 51, 0)\"\r\n        this._dividents = [];\r\n        let gap = 5;\r\n        this._dividentCount = 2;\r\n        let dividentSize = (width - gap * (this._dividentCount + 1)) / this._dividentCount;\r\n        \r\n        for (let x = 0; x < this._dividentCount; x++) {\r\n            this._dividents.push([]);\r\n            for (let y = 0; y < this._dividentCount; y++) {\r\n                this._dividents[x].push(\r\n                    new _shapes_Rectangle__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\r\n                        {\r\n                            x: this._position.x + x * (dividentSize + gap) + gap,\r\n                            y: this._position.y + y * (dividentSize + gap) + gap\r\n                        },\r\n                        dividentSize, dividentSize\r\n                    )\r\n                )\r\n                this._dividents[x][y].fill.color = \"rgb(153, 102, 51)\"\r\n                this._dividents[x][y].stroke.color = \"rgb(77, 51, 25)\"\r\n                this.add(this._dividents[x][y], \"divident_\" + x + \"_\" + y)\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    /**\r\n     * playerTouches()\r\n     * @description checks if a player touched the door\r\n     * @param {Player} player the player to check collision with\r\n     */\r\n    playerTouches(player) {\r\n        const distX = Math.abs(player.x - this._base.x - this._base.width / 2);\r\n        const distY = Math.abs(player.y - this._base.y - this._base.height / 2);\r\n\r\n        if (distX > (this._base.width / 2 + player.radius)) {\r\n            return false;\r\n        }\r\n        if (distY > (this._base.height / 2 + player.radius)) {\r\n            return false;\r\n        }\r\n    \r\n        if (distX <= (this._base.width / 2)) {\r\n            return true;\r\n        }\r\n        if (distY <= (this._base.height / 2)) {\r\n            return true;\r\n        }\r\n\r\n        let deltaX = distX - this._base.width / 2\r\n        let deltaY = distY - this._height / 2\r\n        return deltaX * deltaX + deltaY * deltaY <= player.radius * player.radius\r\n    }\r\n\r\n\r\n    /**\r\n     * enterRoom()\r\n     * @description enters the connected room\r\n     */\r\n    enterRoom(maze, player) {\r\n        if(this.playerTouches(player) && this.connectedRoom) {\r\n            maze.currentRoom = this.connectedRoom;\r\n            player.position = this.connectedRoom.center\r\n\r\n            console.log(maze.currentRoom);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * rotateAroundBase() \r\n     * @description rotates the door around its base \r\n     * @param {Number} angle the angle to rotate\r\n     */\r\n    rotateAroundBase(angle) {\r\n        this.rotateAroundPoint(this._base.center, angle);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * get connectedRoom()\r\n     * @description gets the connected room\r\n     */\r\n    get connectedRoom() {\r\n        return this._connectedRoom;\r\n    }\r\n\r\n    /**\r\n     * set connectedRoom()\r\n     * @description sets the connected room\r\n     * @param {Room} value the room to connect to\r\n     */\r\n    set connectedRoom(value) { \r\n        this._connectedRoom = value;\r\n    }\r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/rooms/Door.js?");

/***/ }),

/***/ "./src/js/rooms/Maze.js":
/*!******************************!*\
  !*** ./src/js/rooms/Maze.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Maze)\n/* harmony export */ });\n/* harmony import */ var _Player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Player */ \"./src/js/Player.js\");\n/* harmony import */ var _distortions_FillDistortion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../distortions/FillDistortion */ \"./src/js/distortions/FillDistortion.js\");\n/* harmony import */ var _distortions_RectangleDistortion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../distortions/RectangleDistortion */ \"./src/js/distortions/RectangleDistortion.js\");\n/* harmony import */ var _distortions_ShadowDistortion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../distortions/ShadowDistortion */ \"./src/js/distortions/ShadowDistortion.js\");\n/* harmony import */ var _distortions_SizeDistortion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../distortions/SizeDistortion */ \"./src/js/distortions/SizeDistortion.js\");\n/* harmony import */ var _distortions_StarDistortion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../distortions/StarDistortion */ \"./src/js/distortions/StarDistortion.js\");\n/* harmony import */ var _distortions_StrokeDistortion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../distortions/StrokeDistortion */ \"./src/js/distortions/StrokeDistortion.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util */ \"./src/js/util.js\");\n/* harmony import */ var _Room__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Room */ \"./src/js/rooms/Room.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Maze - a graph of rooms connected by doors\r\n */\r\nclass Maze {\r\n\r\n\r\n    /**\r\n     * constructor()\r\n     * @param {Player} player the player that is playing the game\r\n     * @param {Point} roomPosition the position of the room\r\n     * @param {Number} roomSize the size of the room\r\n     */\r\n    constructor(player, roomPosition, roomSize) {\r\n        this._roomPosition = roomPosition;\r\n        this._roomSize = roomSize;\r\n        this._player = player;\r\n        this._rooms = this.createRandomRooms(15);\r\n        this._currentRoom = this._rooms[0];\r\n        this._startRoom = this._rooms[0];\r\n\r\n        // distortions are ordered in such a way that the \r\n        // more apparent ones come last\r\n        this._avaliableDistortions = [\r\n            new _distortions_ShadowDistortion__WEBPACK_IMPORTED_MODULE_3__[\"default\"](),\r\n            new _distortions_StrokeDistortion__WEBPACK_IMPORTED_MODULE_6__[\"default\"](\"pink\"),\r\n            new _distortions_FillDistortion__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"blue\"),\r\n            new _distortions_SizeDistortion__WEBPACK_IMPORTED_MODULE_4__[\"default\"](0.5),\r\n            new _distortions_RectangleDistortion__WEBPACK_IMPORTED_MODULE_2__[\"default\"](),\r\n            new _distortions_StarDistortion__WEBPACK_IMPORTED_MODULE_5__[\"default\"]()\r\n        ]\r\n\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * draw() \r\n     * @description draws the maze's current room\r\n     * @param {CanvasRenderingContext2D} context the context to draw to\r\n     */\r\n    draw(context) {\r\n        this._currentRoom.draw(context);\r\n    }\r\n\r\n\r\n    /**\r\n     * update() \r\n     * @description updates the maze\r\n     */\r\n    update() {\r\n        this._currentRoom.update()\r\n    }\r\n\r\n\r\n    /**\r\n     * shows debug information for the room\r\n     */\r\n    debug() {\r\n\r\n    }\r\n    \r\n\r\n\r\n    /**\r\n     * create()\r\n     * @description creates the maze\r\n     * @param {Array[Room]} rooms a list of rooms\r\n     */\r\n    create() {\r\n        var northRooms = [];\r\n        var eastRooms = [];\r\n        var southRooms = [];\r\n        var westRooms = [];\r\n        // Create path to end\r\n        var avaliableDoors = [\"north\", \"east\", \"south\", \"west\"];\r\n        var currentRoom = this._rooms[0];\r\n        let currentDisorder = 0;\r\n        this._startRoom = this._rooms[0];\r\n\r\n        for (let i = 1; i < this._rooms.length; i++) {\r\n            currentRoom.disorder = currentDisorder;\r\n            currentDisorder++;\r\n            var rand = (0,_util__WEBPACK_IMPORTED_MODULE_7__.getRandomInt)(0, 3);\r\n            \r\n            let wall = this.getWall(this._rooms[i-1], avaliableDoors[rand]);\r\n            // add the distortions \r\n            for (let i = 0; i < this._avaliableDistortions.length && i < currentDisorder; i++) {\r\n                wall.mirror.addDistortion(\r\n                    this._avaliableDistortions[i]\r\n                )\r\n            }\r\n\r\n            \r\n            console.log(avaliableDoors[rand]);\r\n            this.linkTwoRooms(this._rooms[i-1], this._rooms[i], avaliableDoors[rand]);\r\n\r\n            currentRoom = this._rooms[i];\r\n            \r\n            if (avaliableDoors[rand] === \"north\") {\r\n                northRooms.push(this._rooms[i]);\r\n                avaliableDoors = (0,_util__WEBPACK_IMPORTED_MODULE_7__.swap)(avaliableDoors, avaliableDoors.indexOf(\"south\"), 3)\r\n            } else if (avaliableDoors[rand] === \"east\") {\r\n                eastRooms.push(this._rooms[i]);\r\n                avaliableDoors = (0,_util__WEBPACK_IMPORTED_MODULE_7__.swap)(avaliableDoors, avaliableDoors.indexOf(\"west\"), 3)\r\n            } else if (avaliableDoors[rand] === \"south\") {\r\n                southRooms.push(this._rooms[i]);\r\n                avaliableDoors = (0,_util__WEBPACK_IMPORTED_MODULE_7__.swap)(avaliableDoors, avaliableDoors.indexOf(\"north\"), 3)\r\n            } else if (avaliableDoors[rand] === \"west\") {\r\n                westRooms.push(this._rooms[i]);\r\n                avaliableDoors = (0,_util__WEBPACK_IMPORTED_MODULE_7__.swap)(avaliableDoors, avaliableDoors.indexOf(\"east\"), 3)\r\n            }\r\n\r\n        }\r\n        this._endRoom = currentRoom;\r\n        this._endRoom.fill.color = \"rgb(0, 255, 255)\";\r\n        this._endRoom.name = \"End\"\r\n\r\n        // Connect empty doors\r\n        /*\r\n        for (let i = 0; i < this._rooms.length; i++) {\r\n            let index = 0;\r\n\r\n\r\n            if (this._rooms[i].northWall.door.connectedRoom == null) {\r\n                index = getRandomInt(0, northRooms.length)\r\n                this.linkTwoRooms(northRooms[index], this._rooms[i], \"north\")\r\n            }\r\n\r\n            if (this._rooms[i].southWall.door.connectedRoom == null) {\r\n                index = getRandomInt(0, southRooms.length)\r\n                this.linkTwoRooms(southRooms[index], this._rooms[i], \"south\")\r\n            }\r\n\r\n            if (this._rooms[i].eastWall.door.connectedRoom == null) {\r\n                index = getRandomInt(0, eastRooms.length)\r\n                this.linkTwoRooms(eastRooms[index], this._rooms[i], \"east\")\r\n            }\r\n\r\n            if (this._rooms[i].westWall.door.connectedRoom == null) {\r\n                index = getRandomInt(0, westRooms.length)\r\n                this.linkTwoRooms(westRooms[index], this._rooms[i], \"west\")\r\n            }\r\n        }*/\r\n    }\r\n\r\n\r\n    /**\r\n     * createRandomRooms()\r\n     * @description creates a list of random rooms\r\n     * @param {Number} count thhe number of rooms to create\r\n     */\r\n    createRandomRooms(count) {\r\n        let randomColor = () => {\r\n            return \"rgb(\" + \r\n                (0,_util__WEBPACK_IMPORTED_MODULE_7__.getRandomInt)(0, 255) + \",\" + \r\n                (0,_util__WEBPACK_IMPORTED_MODULE_7__.getRandomInt)(0, 255) + \",\" + \r\n                (0,_util__WEBPACK_IMPORTED_MODULE_7__.getRandomInt)(0, 255) + \r\n            \")\";\r\n        }\r\n        let rooms = [];\r\n        \r\n        for (let i = 0; i < count; i++) {\r\n            let room = new _Room__WEBPACK_IMPORTED_MODULE_8__[\"default\"](\r\n                this,\r\n                this._player, \r\n                {...this._roomPosition},\r\n                this._roomSize, this._roomSize,\r\n                \"grey\"\r\n            )\r\n            room.name = \"\" + i;\r\n            rooms.push(room);     \r\n        }\r\n\r\n        return rooms;\r\n    }\r\n\r\n\r\n\r\n    /** \r\n     * getWall()\r\n     * @description gets a wall by side\r\n     * @param {Room} room the room to get the wall from\r\n     * @param {String} side the side of the room\r\n     */\r\n    getWall(room, side) {\r\n        switch(side) {\r\n            case \"north\":\r\n                return room.northWall;\r\n            case \"south\": \r\n                return room.southWall;\r\n            case \"east\":\r\n                return room.eastWall;\r\n            case \"west\":\r\n                return room.westWall;\r\n            default: \r\n                console.warn(\"Invalid wall side\");\r\n        }\r\n    }\r\n    \r\n\r\n\r\n\r\n    /**\r\n     * linkTwoRooms()\r\n     * @description This function links two rooms to each other at a specified side.\r\n     *  The roomA will copy its mirror to roomB removing the existing mirror\r\n     */\r\n    linkTwoRooms(roomA, roomB, side) {\r\n        switch (side) { \r\n            case 'north': \r\n                roomA.northWall.door.connectedRoom = roomB;\r\n                roomB.southWall.door.connectedRoom = roomA;\r\n                roomB.southWall.mirror = roomA.northWall.mirror.cloneTo(roomB, roomB.southWall)\r\n                break; \r\n            case 'south': \r\n                roomA.southWall.door.connectedRoom = roomB;\r\n                roomB.northWall.door.connectedRoom = roomA;\r\n                roomB.northWall.mirror = roomA.southWall.mirror.cloneTo(roomB, roomB.northWall)\r\n                break; \r\n            case 'east': \r\n                roomA.eastWall.door.connectedRoom = roomB;\r\n                roomB.westWall.door.connectedRoom = roomA;\r\n                roomB.westWall.mirror = roomA.eastWall.mirror.cloneTo(roomB, roomB.westWall)\r\n                break; \r\n            case 'west': \r\n                roomA.westWall.door.connectedRoom = roomB;\r\n                roomB.eastWall.door.connectedRoom = roomA;\r\n                roomB.eastWall.mirror = roomA.westWall.mirror.cloneTo(roomB, roomB.eastWall)\r\n                break; \r\n            default:\r\n                console.warn(\"Not a valid side for linking rooms\");\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * linkAllRooms()\r\n     * @description links a list of rooms\r\n     * @param {Array[Room]} rooms the rooms to link\r\n     */\r\n    linkAllRooms(rooms) {\r\n        for (let i = 0; i < rooms.length-1; i++) {\r\n            let rand = (0,_util__WEBPACK_IMPORTED_MODULE_7__.getRandomInt)(0, 3);\r\n\r\n            switch(rand) {\r\n                case 0:\r\n                    rooms[i].northWall.door.connectedRoom = rooms[i+1];\r\n                    break;\r\n                case 1:\r\n                    rooms[i].southWall.door.connectedRoom = rooms[i+1];\r\n                    break;\r\n                case 2:\r\n                    rooms[i].eastWall.door.connectedRoom = rooms[i+1];\r\n                    break;\r\n                case 3:\r\n                    rooms[i].westWall.door.connectedRoom = rooms[i+1];\r\n                    break;\r\n                default: \r\n                    console.warn(\"linkRooms() found an invalid connected room choice.\");\r\n                    break;\r\n            }\r\n\r\n        }\r\n\r\n        return rooms;\r\n    }\r\n\r\n\r\n    /**\r\n     * get currentRoom() \r\n     * @description gets the current room\r\n     */\r\n    get currentRoom() {\r\n        return this._currentRoom;\r\n    }\r\n\r\n\r\n    /**\r\n     * set currentRoom()\r\n     * @description sets the current room\r\n     * @param {Room} value the room to set the current room to\r\n     */\r\n    set currentRoom(value) {\r\n        this._currentRoom = value;\r\n    }\r\n\r\n    \r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/rooms/Maze.js?");

/***/ }),

/***/ "./src/js/rooms/Mirror.js":
/*!********************************!*\
  !*** ./src/js/rooms/Mirror.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Mirror)\n/* harmony export */ });\n/* harmony import */ var _distortions_Distortion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../distortions/Distortion */ \"./src/js/distortions/Distortion.js\");\n/* harmony import */ var _shapes_Group__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shapes/Group */ \"./src/js/shapes/Group.js\");\n/* harmony import */ var _shapes_Rectangle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shapes/Rectangle */ \"./src/js/shapes/Rectangle.js\");\n\r\n\r\n\r\n\r\n\r\nclass Mirror extends _shapes_Rectangle__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\r\n\r\n\r\n    /**\r\n     * constructor()\r\n     * @description constructs the Mirror\r\n     * @param {Room} room the room the Mirror is in\r\n     * @param {Point} position the position of the Mirror, top left corner\r\n     * @param {Number} width the width of the Mirror\r\n     * @param {Number} height the height of the Mirror\r\n     */\r\n    constructor(room, wall, position, width, height) {\r\n        super(position, width, height)\r\n        this._room = room;\r\n        this._wall = wall;\r\n        this.fill.color = \"grey\"\r\n\r\n\r\n        this._distortions = [];\r\n    }\r\n\r\n\r\n    /**\r\n     * clone()\r\n     * @description clones this mirror\r\n     * @returns a copy of this mirror\r\n     */\r\n    clone() {\r\n        let newMirror = new Mirror(this._room, this._wall, {...this._position}, this._width, this._height);\r\n        newMirror._mirrorImage = this._room.player.createImage();\r\n        newMirror._distortions = this._distortions;\r\n        return newMirror;\r\n    }\r\n\r\n\r\n    /**\r\n     * cloneTo()\r\n     * @description clones this mirror to a new wall in a new room\r\n     * @param {Room} room the room to clone to\r\n     * @param {Wall} wall the wall to add the new mirror to\r\n     * @returns a copy of this mirror on a specific wall\r\n     */\r\n    cloneTo(room, wall) {\r\n        let newMirror = new Mirror(room, wall, {...this._position}, this._width, this._height)\r\n        console.log(this._wall.rotation);\r\n        newMirror.rotateAroundPoint(this._room.center, 360-this._wall.rotation);\r\n        newMirror.rotateAroundPoint(room.center, wall.rotation);\r\n        newMirror._distortions = [...this._distortions];\r\n        return newMirror;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * copyDistortionsTo()\r\n     * @description copies the distortions to a different mirror\r\n     * @param {Mirror} mirror to copy the distortions to\r\n     */\r\n    copyDistortionsTo(mirror) {\r\n        mirror._distortions = [...this._distortions]\r\n    }\r\n\r\n    /**\r\n     * addDistortion()\r\n     * @description adds a distortion to the mirror\r\n     * @param {Distortion} distortion the distortion on the mirror\r\n     */\r\n    addDistortion(distortion) {\r\n        this._distortions.push(distortion);\r\n    }\r\n\r\n\r\n    /**\r\n     * draw() \r\n     * @description draws the mirror\r\n     * @param {CanvasRenderingContext2D} context the context to draw\r\n     */\r\n    draw(context) {\r\n        super.draw(context);\r\n\r\n        context.save();\r\n        context.rect(this._position.x, this._position.y, this._width, this._height);\r\n        context.clip();\r\n        if(this._imageGroup) this._imageGroup.draw(context);\r\n\r\n        context.restore(); \r\n    }\r\n\r\n\r\n    update() {\r\n        let xInRange = (this._room.player.position.x > this.x && this._room.player.position.x < this.x + this._width);\r\n        let yInRange = (this._room.player.position.y > this.y && this._room.player.position.y < this.y + this._height);\r\n\r\n        // if the player is within the x range or y range of the mirror\r\n        // display the player on the mirror at a size proportional to the\r\n        // distance from the mirror\r\n\r\n        this._mirrorImage = this._room.player.createImage(); // the mirror image of the player\r\n        this._imageGroup = new _shapes_Group__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\r\n        this._imageGroup.add(this._mirrorImage, \"player\");\r\n\r\n        let heightScaleRatio = this._height / this._room.height;\r\n        let widthScaleRatio = this._width / this._room.width;\r\n\r\n        let mirrorPosition = {\r\n            x: widthScaleRatio * this._wall.xDistanceTo(this._room.player.position.x),\r\n            y: heightScaleRatio * this._wall.yDistanceTo(this._room.player.position.y) \r\n        }\r\n\r\n        let scalingFactor = {\r\n            x: Math.abs(this._width - mirrorPosition.x) / this._width,\r\n            y: Math.abs(this._height - mirrorPosition.y) / this._height\r\n        }\r\n\r\n        if(xInRange) {\r\n            this._imageGroup.scale(scalingFactor.y);\r\n            this._imageGroup.moveTo(\r\n                this._imageGroup.center.x,\r\n                this.y + ((this._wall.side === \"north\") ? (this._height - mirrorPosition.y) : mirrorPosition.y)\r\n            )\r\n        }\r\n        \r\n        if(yInRange) {\r\n            this._imageGroup.scale(scalingFactor.x);\r\n            this._imageGroup.moveTo(\r\n                this.x + ((this._wall.side === \"west\") ? (this._width - mirrorPosition.x) : mirrorPosition.x),\r\n                this._imageGroup.center.y\r\n            )\r\n        }\r\n\r\n        if(!xInRange && !yInRange) {\r\n            this._imageGroup = null;\r\n        } \r\n\r\n\r\n        // apply distortions\r\n        for (const distortion of this._distortions) {\r\n            distortion.apply(this, this._imageGroup);\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/rooms/Mirror.js?");

/***/ }),

/***/ "./src/js/rooms/Room.js":
/*!******************************!*\
  !*** ./src/js/rooms/Room.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Room)\n/* harmony export */ });\n/* harmony import */ var _shapes_Rectangle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shapes/Rectangle */ \"./src/js/shapes/Rectangle.js\");\n/* harmony import */ var _Wall__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Wall */ \"./src/js/rooms/Wall.js\");\n\r\n\r\n\r\nclass Room extends _shapes_Rectangle__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor(maze, player, position, width, height, color) {\r\n        super(position, width, height);\r\n        this._maze = maze;\r\n        this._player = player;\r\n        this.fill.color = color;\r\n        this._name = \"\";\r\n\r\n        this._disorder = 0;\r\n\r\n        let wallHeight = 100;\r\n        \r\n        this._northWall = new _Wall__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this, \"north\", wallHeight, 0);\r\n        this._southWall = new _Wall__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this, \"south\", wallHeight, 180);\r\n\r\n        // left wall\r\n        this._westWall = new _Wall__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this, \"west\", wallHeight, 270);\r\n\r\n        // right wall\r\n        this._eastWall = new _Wall__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this, \"east\", wallHeight, 90);\r\n    }\r\n\r\n    /**\r\n     * draw()\r\n     * @description draws the room\r\n     */\r\n    draw(context) {\r\n        super.draw(context);\r\n\r\n        this._northWall.draw(context)\r\n        this._southWall.draw(context)\r\n        this._westWall.draw(context)\r\n        this._eastWall.draw(context)\r\n\r\n        context.textAlign = 'center';\r\n        context.textBaseline = 'middle';\r\n        context.fillStyle = 'black';\r\n        context.font = \"30px Arial\";\r\n        context.fillText(this._name, this._position.x + this._width / 2, this._position.y + this._height / 2)\r\n        //context.fillText(this._disorder, this._position.x + this._width / 2, this._position.y + this._height / 2 + 30)\r\n    }\r\n\r\n\r\n    /**\r\n     * update()\r\n     * @description updates the room\r\n     * @param {CanvasRenderingContext2D} context the rendering context\r\n     */\r\n    update(context) {\r\n        this._northWall.update(context)\r\n        this._southWall.update(context)\r\n        this._westWall.update(context)\r\n        this._eastWall.update(context)\r\n\r\n        this._northWall.door.enterRoom(this._maze, this._player)\r\n        this._southWall.door.enterRoom(this._maze, this._player)\r\n        this._eastWall.door.enterRoom(this._maze, this._player)\r\n        this._westWall.door.enterRoom(this._maze, this._player)\r\n\r\n        \r\n    }\r\n\r\n    /**\r\n     * get player() \r\n     * @description gets the player in this room\r\n     * @returns {Player} the player in this room\r\n     */\r\n    get player() {\r\n        return this._player;\r\n    }\r\n\r\n\r\n    /**\r\n     * set name()\r\n     * @description sets the name of this room\r\n     * @param {String} value the name of the room\r\n     */\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * get name()\r\n     * @description gets the name of this room\r\n     * @return {String} the name of the room\r\n     */\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n\r\n    /**\r\n     * get disorder()\r\n     * @description gets the amount of distorter for this room\r\n     * @return {Number} the amount of distorter for this room\r\n     */\r\n    get disorder() {\r\n        return this._disorder;\r\n    }\r\n\r\n    /**\r\n     * set disorder()\r\n     * @description sets the amount of distorter for this room\r\n     * @param {Integer} disorder the amount of distorter for this room\r\n     */\r\n    set disorder(value) {\r\n        this._disorder = value;\r\n    }\r\n\r\n\r\n    /**\r\n     * get northWall() \r\n     * @description gets the north wall of this room\r\n     */\r\n    get northWall() {\r\n        return this._northWall;\r\n    }\r\n\r\n    /**\r\n     * get southWall() \r\n     * @description gets the south wall of this room\r\n     */\r\n    get southWall() {\r\n        return this._southWall;\r\n    }\r\n\r\n    /**\r\n     * get eastWall() \r\n     * @description gets the east wall of this room\r\n     */\r\n    get eastWall() {\r\n        return this._eastWall;\r\n    }\r\n\r\n    /**\r\n     * get westWall() \r\n     * @description gets the west wall of this room\r\n     */\r\n    get westWall() {\r\n        return this._westWall;\r\n    }\r\n\r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/rooms/Room.js?");

/***/ }),

/***/ "./src/js/rooms/Wall.js":
/*!******************************!*\
  !*** ./src/js/rooms/Wall.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Wall)\n/* harmony export */ });\n/* harmony import */ var _shapes_Group__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shapes/Group */ \"./src/js/shapes/Group.js\");\n/* harmony import */ var _shapes_Rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shapes/Rectangle */ \"./src/js/shapes/Rectangle.js\");\n/* harmony import */ var _Door__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Door */ \"./src/js/rooms/Door.js\");\n/* harmony import */ var _Mirror__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Mirror */ \"./src/js/rooms/Mirror.js\");\n/* harmony import */ var _Room__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Room */ \"./src/js/rooms/Room.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nclass Wall extends _shapes_Group__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n\r\n\r\n    /**\r\n     * constructor()\r\n     * @param {Room} room the room the wall belongs to\r\n     * @param {String} side the side of the room the wall is on\r\n     * @param {Number} height the height of the wall \r\n     */\r\n    constructor(room, side, height, rotation) {\r\n        super();\r\n\r\n        this._mirrors = [];\r\n\r\n        this._height = height;\r\n        let doorWidth = room.width / 5\r\n        let doorGap = 10;\r\n        this._side = side;\r\n        this._rotation = rotation;\r\n        this._room = room;\r\n\r\n        this._wall = new _shapes_Rectangle__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\r\n            { x: room.x, y: room.y - height }, room.width, height\r\n        )\r\n        this._wall.fill.color = \"orange\"\r\n        this.add(this._wall, \"wall\");\r\n        this._door = new _Door__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\r\n            room,\r\n            {\r\n                x: room.x + room.width / 2 - doorWidth / 2,\r\n                y: room.y - height + doorGap\r\n            },\r\n            doorWidth, height - doorGap\r\n        )\r\n        this.add(this._door, \"door\");\r\n\r\n        this._mirror = new _Mirror__WEBPACK_IMPORTED_MODULE_3__[\"default\"](\r\n            room, this,\r\n            {x: room.x + 10, y: room.y - height + 10},\r\n            height - 20, height - 20\r\n        )\r\n\r\n        this.add(this._mirror, \"mirror\");\r\n\r\n        this.rotateAroundPoint(room.center, this._rotation)\r\n\r\n        \r\n    }\r\n\r\n\r\n    /**\r\n     * addMirror()\r\n     * @description adds a mirror\r\n     * @param {Mirror} mirror the mirror to add\r\n     \r\n    addMirror(mirror) {\r\n        this._mirrors.push(mirror);\r\n\r\n        mirror.rotateAroundPoint(this._room.center, this._rotation)\r\n        this.add(mirror, \"mirror_\" + this._mirrors.length);\r\n    }*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * update() \r\n     * @description update the wall\r\n     * @param {CanvasRenderingContext2D} context the rendering context\r\n     */\r\n    update(context) { \r\n        this._mirror.update()\r\n    }\r\n\r\n\r\n    /**\r\n     * xDistanceTo()\r\n     * @param {Number} x the x coordinate to measure the distance to\r\n     */\r\n    xDistanceTo(x) {\r\n        if(this._side === \"west\") { // left wall\r\n            return Math.abs(x - (this._wall.x + this._wall.width))\r\n        }\r\n\r\n        if(this._side === \"east\") { // right wall\r\n            return Math.abs(this._wall.x - x)\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n\r\n    /**\r\n     * yDistanceTo()\r\n     * @param {Number} y the y coordinate to measure the distance to\r\n     */\r\n    yDistanceTo(y) {\r\n        if(this._side === \"north\") {\r\n            return Math.abs((this._wall.y + this._wall.height) - y) \r\n        }\r\n\r\n        if(this._side === \"south\") {\r\n            return Math.abs(this._wall.y - y)\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * get mirror()\r\n     * @description gets the mirror of this wall\r\n     * @returns {Mirror} mirror of this wall\r\n     */\r\n    get mirror() {\r\n        return this._mirror;\r\n    }\r\n\r\n\r\n    /**\r\n     * set mirror()\r\n     * @description sets the mirror of this wall\r\n     * @param {Mirror} value mirror to set to\r\n     */\r\n    set mirror(value) {\r\n        this._mirror = value;\r\n\r\n        this.add(this._mirror, \"mirror\")\r\n    }\r\n\r\n    /**\r\n     * get door()\r\n     * @description gets the door of the wall\r\n     * @returns {Door} door of this wall\r\n     */\r\n    get door() {\r\n        return this._door;\r\n    }\r\n\r\n\r\n    /**\r\n     * get side()\r\n     * @description gets the side of the wall\r\n     */\r\n    get side() {\r\n        return this._side;\r\n    }\r\n\r\n\r\n    /**\r\n     * get rotation()\r\n     * @description gets the rotation of the wall\r\n     */\r\n    get rotation() {\r\n        return this._rotation;\r\n    }\r\n\r\n\r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/rooms/Wall.js?");

/***/ }),

/***/ "./src/js/scenes/MainScene.js":
/*!************************************!*\
  !*** ./src/js/scenes/MainScene.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MainScene)\n/* harmony export */ });\n/* harmony import */ var _Player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Player */ \"./src/js/Player.js\");\n/* harmony import */ var _Scene__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Scene */ \"./src/js/scenes/Scene.js\");\n/* harmony import */ var _rooms_Maze__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../rooms/Maze */ \"./src/js/rooms/Maze.js\");\n\r\n\r\n\r\n\r\n/**\r\n * MainScene - the main scene of the game\r\n */\r\n\r\nclass MainScene extends _Scene__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\r\n\r\n\r\n    /**\r\n     * constructor()\r\n     * @description constructs the scene\r\n     * @param {CanvasRenderingContext2D} context the context to draw to \r\n     */\r\n    constructor(game, context) {\r\n        super(game, context);\r\n    }\r\n\r\n\r\n    /**\r\n     * create()\r\n     * @description creates the scene\r\n     */\r\n    create() {\r\n        let roomSize = 300;\r\n        let roomPosition = {\r\n            x: window.innerWidth / 2 - roomSize / 2, \r\n            y: window.innerHeight / 2 - roomSize / 2\r\n        }\r\n        let roomCenter = {\r\n            x: roomPosition.x + roomSize / 2,\r\n            y: roomPosition.y + roomSize / 2\r\n        }\r\n\r\n        this._player = new _Player__WEBPACK_IMPORTED_MODULE_0__[\"default\"](roomCenter, 10)\r\n\r\n        this._maze = new _rooms_Maze__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\r\n            this._player, roomPosition, roomSize\r\n        )\r\n        this._maze.create();\r\n\r\n        this._keysPressed = {};\r\n\r\n        let self = this;\r\n        this._gameLoop = setInterval(() => {\r\n            self.handleMovement(self._keysPressed);\r\n            self.draw(this._context);\r\n            self.update();\r\n        }, 40)\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * onKeyUp()\r\n     * @description called when a key has been released\r\n     * @param {KeyboardEvent} event the keyboard event\r\n     */\r\n    onKeyUp(event) {\r\n        this._keysPressed[event.key] = false;\r\n    }\r\n\r\n    /**\r\n     * onKeyDown()\r\n     * @description called when a key has been pressed\r\n     * @param {KeyboardEvent} event the keyboard event\r\n     */\r\n    onKeyDown(event) {\r\n        this._keysPressed[event.key] = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * destroy()\r\n     * @description destroys the scene\r\n     */\r\n    destroy() {\r\n        clearInterval(this._gameLoop);\r\n    }\r\n\r\n    /**\r\n     * draw()\r\n     * @description draws the scene\r\n     * @param {CanvasRenderingContext2D} context the context to draw to\r\n     */\r\n    draw(context) {\r\n        context.clearRect(0, 0, window.innerWidth, window.innerHeight);\r\n\r\n        this._maze.draw(context);\r\n        this._player.draw(context);\r\n    }\r\n\r\n    /**\r\n     * update()\r\n     * @description updates the scene\r\n     */\r\n    update() {\r\n        this._maze.update();\r\n    }\r\n\r\n\r\n    /**\r\n     * movement()\r\n     * @description determines the behavior of player movement\r\n     * @param {Key} key the key that was pressed\r\n     */\r\n    handleMovement(keysPressed) {\r\n        let speed = 5;\r\n        let onWallAmount = 10\r\n\r\n        if(\r\n            keysPressed['w'] && \r\n            this._player.position.y - speed > this._maze.currentRoom.position.y + this._player.radius - onWallAmount\r\n        ) {\r\n            this._player.position.y -= speed\r\n        }\r\n\r\n        if(\r\n            keysPressed['a'] && \r\n            this._player.position.x - speed > this._maze.currentRoom.position.x + this._player.radius - onWallAmount\r\n        ) {\r\n            this._player.position.x -= speed\r\n        }\r\n\r\n        if(\r\n            keysPressed['s'] && \r\n            this._player.position.y + speed < this._maze.currentRoom.position.y + this._maze.currentRoom.height - this._player.radius + onWallAmount\r\n        ) {\r\n            this._player.position.y += speed\r\n        }\r\n\r\n        if(\r\n            keysPressed['d'] &&\r\n            this._player.position.x + speed < this._maze.currentRoom.position.x + this._maze.currentRoom.width - this._player.radius + onWallAmount\r\n        ) {\r\n            this._player.position.x += speed\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/scenes/MainScene.js?");

/***/ }),

/***/ "./src/js/scenes/Scene.js":
/*!********************************!*\
  !*** ./src/js/scenes/Scene.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Scene)\n/* harmony export */ });\nclass Scene {\r\n\r\n\r\n    /**\r\n     * constructor()\r\n     * @description constructs the scene\r\n     */\r\n    constructor(game, context) {\r\n        this._context = context;\r\n        this._game = game;\r\n    }\r\n\r\n\r\n    /**\r\n     * draw()\r\n     * @description draws the scene\r\n     * @param {CanvasRenderingContext2D} context the context to draw to\r\n     */\r\n    draw(context) {}\r\n\r\n\r\n\r\n    /**\r\n     * update()\r\n     * @description updates the scene\r\n     */\r\n    update() {}\r\n\r\n\r\n    /**\r\n    * onMouseUp()\r\n    * @description called when the mouse button has been released\r\n    * @param {MouseEvent} event the mouse event\r\n    */\r\n    onMouseUp(event) {}\r\n\r\n    /**\r\n     * onMouseDown()\r\n     * @description called when the mouse button has been pressed\r\n     * @param {MouseEvent} event the mouse event\r\n     */\r\n    onMouseDown(event) {}\r\n\r\n\r\n    /**\r\n     * onMouseClick() \r\n     * @description called when the mouse is clicked\r\n     * @param {MouseEvent} event the mouse event\r\n     */\r\n    onMouseClick(event) {}\r\n\r\n    /**\r\n     * onKeyUp()\r\n     * @description called when a key has been released\r\n     * @param {KeyboardEvent} event the keyboard event\r\n     */\r\n    onKeyUp(event) {}\r\n\r\n    /**\r\n     * onKeyDown()\r\n     * @description called when a key has been pressed\r\n     * @param {KeyboardEvent} event the keyboard event\r\n     */\r\n    onKeyDown(event) {}\r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/scenes/Scene.js?");

/***/ }),

/***/ "./src/js/scenes/WelcomeScene.js":
/*!***************************************!*\
  !*** ./src/js/scenes/WelcomeScene.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ WelcomeScene)\n/* harmony export */ });\n/* harmony import */ var _gui_StartButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../gui/StartButton */ \"./src/js/gui/StartButton.js\");\n/* harmony import */ var _Scene__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Scene */ \"./src/js/scenes/Scene.js\");\n\r\n\r\n\r\nclass WelcomeScene extends _Scene__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\r\n    /**\r\n     * constructor()\r\n     * @description constructs the scene\r\n     */\r\n    constructor(game, context) {\r\n        super(game, context)\r\n\r\n        this._instructionFontSize = 14;\r\n        this._instructionSpacing = 4;\r\n        this._instructions = [\r\n            \"Find your way through the rooms to the end room.\",\r\n            \"Look at the mirrors on the walls of each room to determine which room to enter.\",\r\n            \"The mirrors closer to the end room will more\",\r\n            \"and more different from what you'd expect to see in a mirror.\",\r\n            \"Use the WASD keys to navigate the rooms.\",\r\n            \"There are 15 rooms total. The last room will be label end\",\r\n            \"Press start to begin.\"\r\n        ]\r\n    }\r\n\r\n    /**\r\n     * onMouseUp()\r\n     * @description called when the mouse button has been released\r\n     * @param {MouseEvent} event the mouse event\r\n     */\r\n    onMouseUp(event) {\r\n\r\n    }\r\n\r\n    /**\r\n     * onMouseDown()\r\n     * @description called when the mouse button has been pressed\r\n     * @param {MouseEvent} event the mouse event\r\n     */\r\n    onMouseDown(event) {\r\n        \r\n    }\r\n\r\n\r\n    /**\r\n     * onMouseClick() \r\n     * @description called when the mouse is clicked\r\n     * @param {MouseEvent} event the mouse event\r\n     */\r\n    onMouseClick(event) {\r\n        let mousePos = {\r\n            x: event.clientX,\r\n            y: event.clientY\r\n        }\r\n\r\n        if(this._startButton.contains(mousePos)) {\r\n            this._game.nextScene();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * create()\r\n     * @description creates the scene\r\n     */\r\n    create() {\r\n\r\n        \r\n        this._startButton = new _gui_StartButton__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\r\n            {\r\n                x: window.innerWidth / 2 - 50, \r\n                y: window.innerHeight / 2 + 10 + this._instructions.length * (this._instructionFontSize + this._instructionSpacing)\r\n            },\r\n            100, 50, \"Start\"\r\n        )\r\n\r\n        this._startButton.fill.color = \"green\"\r\n\r\n    }\r\n\r\n    /**\r\n     * draw()\r\n     * @description draws the scene\r\n     * @param {CanvasRenderingContext2D} context the context to draw to\r\n     */\r\n    draw(context) {\r\n        context.clearRect(0, 0, window.innerWidth, window.innerHeight);\r\n\r\n        context.textAlign = \"center\";\r\n        context.textBaseline = \"middle\"\r\n        context.font = \"50px Arial\";\r\n        context.fillText(\"Hall of Mirrors\", window.innerWidth / 2, window.innerHeight / 2 - 50);\r\n\r\n        \r\n\r\n        context.font = this._instructionFontSize + \"px Arial\";\r\n\r\n        for (let i = 0; i < this._instructions.length; i++) {\r\n            context.fillText(\r\n                this._instructions[i], \r\n                window.innerWidth / 2,\r\n                window.innerHeight / 2 + i * (this._instructionFontSize + this._instructionSpacing)\r\n            )\r\n        }\r\n        this._startButton.draw(context);\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * update()\r\n     * @description updates the scene\r\n     */\r\n    update() {}\r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/scenes/WelcomeScene.js?");

/***/ }),

/***/ "./src/js/shapes/Circle.js":
/*!*********************************!*\
  !*** ./src/js/shapes/Circle.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Circle)\n/* harmony export */ });\n/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Point */ \"./src/js/shapes/Point.js\");\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Shape */ \"./src/js/shapes/Shape.js\");\n\r\n\r\n\r\n\r\n/**\r\n * Circle - a circle\r\n */\r\nclass Circle extends _Shape__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\r\n\r\n\t/**\r\n\t * constructor()\r\n\t * @param {Point} center the center of the circle\r\n\t * @param {Number} radius the radius of the circle\r\n\t */\r\n\tconstructor(center, radius) {\r\n        super(center);\r\n\t\tthis._radius = radius;\t\r\n\t}\r\n\r\n\r\n    /**\r\n     * draw()\r\n     * @description draws the circle\r\n     */\r\n    draw(context) {\r\n        super.draw(context);\r\n\r\n        context.beginPath();\r\n\r\n        context.arc(\r\n            this._position.x,\r\n            this._position.y,\r\n            this._radius, 0, 2 * Math.PI, false\r\n        );\r\n\r\n\t\tcontext.fill();\r\n\t\tcontext.stroke();\r\n\r\n        context.closePath();\r\n    }\r\n\r\n\r\n\t/**\r\n\t * clone()\r\n\t * @description clones the Circle\r\n\t */\r\n\tclone() {\r\n\t\tlet circle = new Circle({...this._position}, this._radius);\r\n\t\tcircle.fill.color = this.fill.color;\r\n\t\treturn circle;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * create()\r\n\t * @description creates the graphic\r\n\t */\r\n\tcreate() {\r\n\r\n\t}\r\n\r\n\r\n\tupdate() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * toPoints()\r\n\t * @description converts the circle to points\r\n\t */\r\n\ttoPoints() {\r\n\t\tlet sides = 6;\r\n\t\tlet angle = 360 / sides\r\n\t\tlet points = [];\r\n\r\n\t\tfor (let i = 0; i < sides; i++) {\r\n\t\t\tpoints.push({\r\n\t\t\t\tx: this.center.x + this._radius * Math.cos((i * angle) * Math.PI / 180), \r\n\t\t\t\ty: this.center.y + this._radius * Math.sin((i * angle) * Math.PI / 180)\r\n            })\r\n\t\t}\r\n\r\n\t\treturn points;\r\n\t}\r\n\r\n\r\n\r\n\r\n\t/**\r\n     * moveBy() \r\n     * @description moves the circle by a delta x, and y\r\n     * @param {Number} deltaX the difference in x to move the circle\r\n     * @param {Number} deltaY the difference in y to move the circle\r\n     */\r\n    moveBy(deltaX, deltaY) {\r\n        this.center.x += deltaX;\r\n        this.center.y += deltaY;\r\n    }\r\n\r\n\r\n\t/**\r\n\t * moveTo()\r\n\t * @description move the circle to the specified location\r\n\t * @param {Number} x the x coordinate to move the circle to\r\n\t * @param {Number} y the y coordinate to move the circle to\r\n\t */\r\n\tmoveTo(x, y) {\r\n\t\tthis._position.x = x;\r\n\t\tthis._position.y = y;\r\n\t}\r\n\r\n\t/**\r\n\t * contains()\r\n\t * @description checks whether the given point is within the circle\r\n\t * @param {Point} point the point to check for containment\r\n\t * @returns true if the point is within the circle, false otherwise\r\n\t */\r\n\tcontains (point) {\r\n\t  return (0,_Point__WEBPACK_IMPORTED_MODULE_0__.Distance)(this.center, point) <= this._radius;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * scale()\r\n\t * @description scales the rectangle by the given amount\r\n\t * @param {Number} amount the amount to scale the rectangle by\r\n\t */\r\n\tscale(amount) {\r\n\t\tthis._radius *= amount;\r\n\t}\r\n\r\n\t/**\r\n\t * rotateAroundPoint() \r\n\t * @description rotates the circle around a point\r\n\t * @param {Point} point the point to rotate the circle around\r\n\t * @param {Degrees} angle the angle to rotate the circle by in degrees\r\n\t */\r\n\trotateAroundPoint(point, angle) {\r\n\t\tthis._position = (0,_Point__WEBPACK_IMPORTED_MODULE_0__.rotatePoint)(this._position, point, angle);\r\n\t}\r\n\r\n\t/**\r\n\t * set center()\r\n\t * @description sets the center of the circle\r\n\t * @param {Number} center the center of the circle\r\n\t */\r\n\tset center(value) {\r\n\t\tthis._position = value;\r\n\t}\r\n\r\n\t/**\r\n\t * get center() \r\n\t * @description gets the center of the circle\r\n\t * @return {Point} the center of the circle\r\n\t */\r\n\tget center() {\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * get radius()\r\n\t * @description gets the radius of the circle\r\n\t */\r\n\tget radius() {\r\n\t\treturn this._radius;\r\n\t}\r\n\r\n\r\n\r\n}\r\n\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/shapes/Circle.js?");

/***/ }),

/***/ "./src/js/shapes/Group.js":
/*!********************************!*\
  !*** ./src/js/shapes/Group.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Group)\n/* harmony export */ });\n/**\r\n * Group - a container for holding shapes\r\n */\r\nclass Group {\r\n    /**\r\n     * constructor()\r\n     * @description constructs the group\r\n     */\r\n    constructor() {\r\n        this._position = {x: 0, y: 0};\r\n        this._objects = {}; // shapes within the group\r\n        this._drawOrder = []; // the order in which objects are rendered\r\n    }\r\n\r\n\r\n    /**\r\n     * rotateAroundCenter()\r\n     * @description rotates the group around its center\r\n     */\r\n    rotateAroundCenter(angle) {\r\n        // find the center\r\n        let center = this.center;\r\n\r\n        for (const obj of Object.values(this._objects)) {\r\n            obj.rotateAroundPoint(center, angle)\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * rotateAroundPoint()\r\n     * @description rotates the group around a point\r\n     * @param {Point} point the point to rotate around\r\n     * @param {Degrees} angle the angle to rotate by\r\n     */\r\n    rotateAroundPoint(point, angle) {\r\n        for (const obj of Object.values(this._objects)) {\r\n            obj.rotateAroundPoint(point, angle);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * update() \r\n     * @description updates the objects in the group\r\n     */\r\n    update() {\r\n        for (const obj of Object.values(this._objects)) {\r\n            obj.update()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * draw()\r\n     * @description draws the objects in the group\r\n     * @param {CanvasRenderingContext2D} context the context to draw to\r\n     */\r\n    draw(context) {\r\n        if(this._drawOrder.length === 0) {\r\n            for (const obj of Object.values(this._objects)) {\r\n                obj.draw(context)\r\n            }\r\n        } else {\r\n            for (const key of this._drawOrder) {\r\n                this._objects[key].draw(context)\r\n            }\r\n\r\n            for (const key of Object.keys(this._objects)) {\r\n                if(!this._drawOrder.includes(key)) {\r\n                    this._objects[key].draw(context)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * create()\r\n     * @description creates the objects in the group\r\n     */\r\n    create() {\r\n        for (const obj of Object.values(this._objects)) {\r\n            obj.create()\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * add()\r\n     * @description adds a shape to the group\r\n     * @param {Shape} shape the shape to add to the group\r\n     * @param {Number} x the local x coordinate of the shape\r\n     * @param {Number} y the local y coordinate of the shape\r\n     */\r\n    add(shape, name) {\r\n        //shape.x = this.position.x + x;\r\n        //shape.y = this.position.y + y;\r\n        this._objects[name] = shape;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n    \r\n    /**\r\n     * findObjectNearestPoint()\r\n     * @description find the object closest to a point\r\n     * @param {Point} point the point the object should be near\r\n     * @returns the nearest object\r\n     */\r\n    findObjectNearestPoint(point) {\r\n        // find the closest snappable region that\r\n        // intersects\r\n\r\n        var closestKey = null;\r\n        var closestDistance = Infinity;\r\n\r\n\r\n        for (let key of Object.keys(this._objects)) {\r\n            let center = this.center\r\n            let distance = Distance(center, point)\r\n\r\n            // find the closest intersecting snap area\r\n            if (distance < closestDistance) {\r\n                closestDistance = distance\r\n                closestKey = key\r\n            }\r\n        }\r\n\r\n        return this._objects[closestKey];\r\n    }\r\n\r\n\r\n    /**\r\n     * toPoints()\r\n     * @description converts this group into a list of points\r\n     * @returns the group as a list of points\r\n     */\r\n    toPoints() {\r\n        let points = [];\r\n        for (const obj of Object.values(this._objects)) {\r\n            points = points.concat(obj.toPoints());\r\n        }\r\n        return points;\r\n    }\r\n\r\n    /**\r\n     * moveBy()\r\n     * @description moves the group by delta\r\n     * @param {Number} deltaX the difference in x to move the group\r\n     * @param {Number} deltaY the difference in y to move the group\r\n     */\r\n    moveBy(deltaX, deltaY) {\r\n        for (const obj of Object.values(this._objects)) {\r\n\t\t\tobj.moveBy(deltaX, deltaY)\r\n\t\t}\r\n    }\r\n\r\n\r\n    /**\r\n     * moveTo()\r\n     * @description Moves the center of the group to a specified location\r\n     * @param {Number} x the x coordinate to move to\r\n     * @param {Number} y the y coordinate to move to\r\n     */\r\n    moveTo(x, y) { \r\n\r\n        let delta = {\r\n            x: x - this.center.x,\r\n            y: y - this.center.y \r\n        }\r\n\r\n        for (const obj of Object.values(this._objects)) {\r\n            obj.moveBy(delta.x, delta.y);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * get objects()\r\n     * @description gets the objects in the group\r\n     */\r\n    get objects() {\r\n        return this._objects;\r\n    }\r\n\r\n    /**\r\n     * get center()\r\n     * @description gets the center of the group\r\n     */\r\n    get center() {\r\n        // convert every shape in the group to points\r\n        // the calculate the center by averaging the points\r\n        let total = {\r\n            x: 0,\r\n            y: 0\r\n        }\r\n\r\n        for (const obj of Object.values(this._objects)) {\r\n            total.x += obj.center.x \r\n            total.y += obj.center.y \r\n        }\r\n\r\n        return {\r\n            x: total.x / Object.keys(this._objects).length,\r\n            y: total.y / Object.keys(this._objects).length\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        \r\n    }\r\n\r\n\r\n    /**\r\n\t * scale()\r\n\t * @description scales the rectangle by the given amount\r\n\t * @param {Number} amount the amount to scale the rectangle by\r\n\t */\r\n\tscale(amount) {\r\n        for (const obj of Object.values(this._objects)) {\r\n            obj.scale(amount);\r\n        }\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * scaleHeight()\r\n\t * @description scales the y dimension of all objects in the group\r\n\t * @param {Number} amount the amount to scale the y dimension by\r\n\t */\r\n\tscaleY(amount) {\r\n\t\tfor (const obj of Object.values(this._objects)) {\r\n            obj.scaleHeight(amount);\r\n        }\r\n\t}\r\n\r\n\t/**\r\n\t * scaleWidth()\r\n\t * @description scales the x dimension of all objects in the group\r\n\t * @param {Number} amount the amount to scale the x dimension by\r\n\t */\r\n\tscaleX(amount) {\r\n\t\tfor (const obj of Object.values(this._objects)) {\r\n            obj.scaleWidth(amount);\r\n        }\r\n\t}\r\n\r\n\r\n    /**\r\n     * getMinX() \r\n     * @description returns the minimum x value of the group\r\n     */\r\n    getMinX() {\r\n        let xMin = Infinity;\r\n        for (const obj of Object.values(this._objects)) {\r\n            let points = obj.toPoints();\r\n            for (const point of points) {\r\n                if(point.x < xMin) {\r\n                    xMin = point.x;\r\n                }\r\n            }\r\n        }\r\n        return xMin;\r\n    }\r\n\r\n\r\n    /**\r\n     * getMaxX() \r\n     * @description returns the maximum x value of the group\r\n     */\r\n    getMaxX() {\r\n        let xMax = -Infinity;\r\n        for (const obj of Object.values(this._objects)) {\r\n            let points = obj.toPoints();\r\n            for (const point of points) {\r\n                if(point.x > xMax) {\r\n                    xMax = point.x;\r\n                }\r\n            }\r\n        }\r\n        return xMax;\r\n    }\r\n\r\n\r\n    /**\r\n     * getMinX() \r\n     * @description returns the minimum x value of the group\r\n     */\r\n    getMinY() {\r\n        let yMin = Infinity;\r\n        for (const obj of Object.values(this._objects)) {\r\n            let points = obj.toPoints();\r\n            for (const point of points) {\r\n                if(point.y < yMin) {\r\n                    yMin = point.y;\r\n                }\r\n            }\r\n        }\r\n        return yMin;\r\n    }\r\n\r\n\r\n    /**\r\n     * getMaxX() \r\n     * @description returns the maximum x value of the group\r\n     */\r\n    getMaxY() {\r\n        let yMax = -Infinity;\r\n        for (const obj of Object.values(this._objects)) {\r\n            let points = obj.toPoints();\r\n            for (const point of points) {\r\n                if(point.y > yMax) {\r\n                    yMax = point.y;\r\n                }\r\n            }\r\n        }\r\n        return yMax;\r\n    }\r\n\r\n\r\n    /**\r\n     * getObject()\r\n     * @description gets the object with the given key\r\n     * @param {String} key the key of the object\r\n     * @returns the object with the given key\r\n     */\r\n    getObject(key) {\r\n        return this._objects[key];\r\n    }\r\n\r\n    /**\r\n     * get width()\r\n     * @description gets the width of the group\r\n     * @returns {Number} the width of the group\r\n     */\r\n    get width() {\r\n        // the min x, and max x. The difference between them is the width\r\n        let xMin = this.getMinX();\r\n        let xMax = this.getMaxX();\r\n        return xMax - xMin;\r\n    }\r\n\r\n\r\n    /**\r\n     * get height()\r\n     * @description returns the height of the group\r\n     * \r\n     */\r\n    get height() {\r\n        let yMin = this.getMinY();\r\n        let yMax = this.getMaxY();\r\n        return yMax - yMin;\r\n    }\r\n\r\n  \r\n\r\n\r\n    /**\r\n     * get position()\r\n     * @description gets the position of the group\r\n     * @returns {Point} the position of the group\r\n     */\r\n    get position() {\r\n        return this._position;\r\n    }\r\n\r\n\r\n    /**\r\n     * set position()\r\n     * @description sets the position of the group\r\n     * @param {Point} position the position of the group\r\n     */\r\n    set position(value) { \r\n        this._position = value;\r\n    }\r\n\r\n\r\n    /**\r\n\t * get x()\r\n\t * @description gets the x position of the shape\r\n\t * @returns the x position of the shape\r\n\t */\r\n\tget x() {\r\n\t\treturn this._position.x;\r\n\t}\r\n\r\n\t/**\r\n\t * set x()\r\n\t * @description sets the x position of the shape\r\n\t * @param {Number} value the value to set x position\r\n\t */\r\n\tset x(value) {\r\n\t\tthis._position.x = value;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * get y()\r\n\t * @description gets the y position of the shape\r\n\t * @returns the y position of the shape\r\n\t */\r\n\tget y() {\r\n\t\treturn this._position.y;\r\n\t}\r\n\r\n\t/**\r\n\t * set y()\r\n\t * @description sets the y position of the shape\r\n\t * @param {Number} value the value to set y position\r\n\t */\r\n\tset y(value) {\r\n\t\tthis._position.y = value;\r\n\t}\r\n\r\n\r\n    /**\r\n     * set drawOrder()\r\n     * @description sets the drawOrder\r\n     * @param {Number} value the value to set drawOrder to \r\n     */\r\n    set drawOrder(value) {\r\n        this._drawOrder = value;\r\n    }\r\n    \r\n    /**\r\n\t * get drawOrder()\r\n\t * @description gets the drawOrder position of the shape\r\n\t * @returns the drawOrder position of the shape\r\n\t */\r\n\tget drawOrder() {\r\n\t\treturn this._drawOrder;\r\n\t}\r\n\r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/shapes/Group.js?");

/***/ }),

/***/ "./src/js/shapes/Point.js":
/*!********************************!*\
  !*** ./src/js/shapes/Point.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Distance\": () => (/* binding */ Distance),\n/* harmony export */   \"rotatePoint\": () => (/* binding */ rotatePoint),\n/* harmony export */   \"rotatePoints\": () => (/* binding */ rotatePoints)\n/* harmony export */ });\n\r\n/**\r\n * Distance()\r\n * @description finds the distance between two points\r\n * @param {Point} point1 the first point\r\n * @param {Point} point2 the second point\r\n * @returns the distance between the two points\r\n */\r\nfunction Distance(point1, point2) {\r\n  return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2))\r\n}\r\n\r\n/**\r\n * rotatePoint()\r\n * @description rotates a point around a center point\r\n * @param {Point} point the point to rotate\r\n * @param {Point} center the center to rotate the point around\r\n * @param {Degrees} angle the angle in degrees\r\n * @returns the new point\r\n */\r\nfunction rotatePoint(point, center, angle) {\r\n  var cosTheta = Math.cos(angle * Math.PI / 180);\r\n  var sinTheta = Math.sin(angle * Math.PI / 180);\r\n  var xPrime = (point.x - center.x) * cosTheta - (point.y - center.y) * sinTheta + center.x;\r\n  var yPrime = (point.x - center.x) * sinTheta + (point.y - center.y) * cosTheta + center.y;\r\n  return {x: xPrime, y: yPrime};\r\n}\r\n\r\n\r\n// from chatgpt\r\n/**\r\n * rotatePoint()\r\n * @description rotates a list of points around a center point\r\n * @param {Array[Point]} points the points to rotate\r\n * @param {Point} center the center to rotate the points around\r\n * @param {Degrees} angle the angle in degrees\r\n * @returns the new point\r\n */\r\nfunction rotatePoints(points, center, angle) {\r\n  var cosTheta = Math.cos(angle * Math.PI / 180);\r\n  var sinTheta = Math.sin(angle * Math.PI / 180);\r\n  var rotatedPoints = [];\r\n  for (var i = 0; i < points.length; i++) {\r\n    var point = points[i];\r\n    var x = point.x;\r\n    var y = point.y;\r\n    var xPrime = (x - center.x) * cosTheta - (y - center.y) * sinTheta + center.x;\r\n    var yPrime = (x - center.x) * sinTheta + (y - center.y) * cosTheta + center.y;\r\n    rotatedPoints.push({x: xPrime, y: yPrime});\r\n  }\r\n  return rotatedPoints;\r\n}\r\n\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/shapes/Point.js?");

/***/ }),

/***/ "./src/js/shapes/Rectangle.js":
/*!************************************!*\
  !*** ./src/js/shapes/Rectangle.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Rectangle)\n/* harmony export */ });\n/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Point */ \"./src/js/shapes/Point.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ \"./src/js/util.js\");\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Shape */ \"./src/js/shapes/Shape.js\");\n/**\r\n * Rectangle - a rectangle whose position starts at the top left corner\r\n */\r\n\r\n\r\n\r\n\r\n\r\nclass Rectangle extends _Shape__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\r\n\t/**\r\n\t * constructor()\r\n\t * @description constructs the Rect\r\n\t * @param {Point} position the position of the Rect, top left corner\r\n\t * @param {Number} width the width of the rect\r\n\t * @param {Number} height the height of the rect\r\n\t */\r\n\tconstructor(position={x: 0, y: 0}, width=0, height=0) {\r\n        super(position);\r\n\t\tthis._width = width;\r\n\t\tthis._height = height;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * draw()\r\n\t * @description draws the rectangle\r\n\t * @param {CanvasRenderingContext2D} context the context to draw to\r\n\t */\r\n    draw(context) {\r\n        super.draw(context);\r\n        context.fillRect(this._position.x, this._position.y, this._width, this._height);\r\n        context.strokeRect(this._position.x, this._position.y, this._width, this._height);\r\n    }\r\n\r\n\r\n\t/**\r\n\t * clone()\r\n\t * @description clones the Rect \r\n\t * @returns {Rect} a clone of the Rect\r\n\t */\r\n\tclone() {\r\n\t\tlet clone = new Rectangle(\r\n\t\t\tthis._layer, this._position, this._width, this._height\r\n\t\t)\r\n\r\n\t\tclone._fill = {...this._fill};\r\n\t\tclone._stroke = {...this._stroke};\r\n\r\n\t\treturn clone;\r\n\t}\r\n\r\n\t/**\r\n\t * getAxes()\r\n\t * @description gets the axes for the rectangle\r\n\t * @returns the axes for the rectangle\r\n\t */\r\n\tgetAxes() { \r\n\t\tlet vertices = this.toPoints();\r\n\t\tlet axes = [];\r\n\t\t// loop over the vertices\r\n\t\tfor (let i = 0; i < vertices.length; i++) {\r\n\t\t\t// get the current vertex\r\n\t\t\tlet p1 = vertices[i];\r\n\t\t\t// get the next vertex\r\n\t\t\tlet p2 = vertices[i + 1 == vertices.length ? 0 : i + 1];\r\n\t\t\t// subtract the two to get the edge vector\r\n\t\t\tlet edge = {\r\n\t\t\t\tx: p1.x - p2.x,\r\n\t\t\t\ty: p1.y - p2.y\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// get either perpendicular vector\r\n\t\t\tlet normal = {\r\n\t\t\t\tx: -edge.y,\r\n\t\t\t\ty: edge.x\r\n\t\t\t}\r\n\t\t\t// the perp method is just (x, y) =&gt; (-y, x) or (y, -x)\r\n\t\t\taxes.push(normal)\r\n\t\t}\t\r\n\t\treturn axes;\r\n\t}\r\n\r\n\tintersect(rect) {\r\n\t\t// use the SAT \r\n\t  let axes1 = this.getAxes();\r\n\t  let axes2 = rect.getAxes();\r\n\t  \r\n\t  // loop over the axes1\r\n\t  for (let i = 0; i < axes1.length; i++) {\r\n\t\tlet axis = axes1[i];\r\n\t\t// project both shapes onto the axis\r\n\t\tlet p1 = (0,_util__WEBPACK_IMPORTED_MODULE_1__.project)(this, axis);\r\n\t\tlet p2 = (0,_util__WEBPACK_IMPORTED_MODULE_1__.project)(rect, axis);\r\n\t\t// do the projections overlap?\r\n\t\tif (!(0,_util__WEBPACK_IMPORTED_MODULE_1__.overlap)(p1, p2)) {\r\n\t\t  // then we can guarantee that the shapes do not overlap\r\n\t\t  return false;\r\n\t\t}\r\n\t  }\r\n\t  // loop over the axes2\r\n\t  for (let i = 0; i < axes2.length; i++) {\r\n\t\tlet axis = axes2[i];\r\n\t\t// project both shapes onto the axis\r\n\t\tlet p1 = (0,_util__WEBPACK_IMPORTED_MODULE_1__.project)(this, axis);\r\n\t\tlet p2 = (0,_util__WEBPACK_IMPORTED_MODULE_1__.project)(rect, axis);\r\n\t\t// do the projections overlap?\r\n\t\tif (!(0,_util__WEBPACK_IMPORTED_MODULE_1__.overlap)(p1, p2)) {\r\n\t\t  // then we can guarantee that the shapes do not overlap\r\n\t\t  return false;\r\n\t\t}\r\n\t  }\r\n\t  // if we get here then we know that every axis had overlap on it\r\n\t  // so we can guarantee an intersection\r\n\t  return true;\r\n\t}\r\n\r\n\t/**\r\n\t * contains()\r\n\t * @description checks whether the specifed point is contained within the rect\r\n\t * @param {Point} point the point to check for \r\n\t * @returns true if the point is contained within the rect \r\n\t * \t\t\tfalse otherwise\r\n\t */\r\n\tcontains (point) {\r\n\t\treturn (\r\n\t\t\t\t(this._position.x <= point.x\r\n\t\t && this._position.x + this._width >= point.x)\r\n\t\t && (this._position.y <= point.y\r\n\t\t && this._position.y + this._height >= point.y)\r\n\t );\r\n\t}\r\n\r\n\t/**\r\n\t * withinYRange()\r\n\t * @description checks whether this rectangle is within the y range \r\n\t *  of another rectangle\r\n\t * @param {Rect} rect the other rectangle\r\n\t */\r\n\twithinYRange(rect) {\r\n\t\treturn (\r\n\t\t\t(\r\n\t\t\t\tthis.position.y < rect.position.y && \r\n\t\t\t\tthis.position.y + this.height > rect.position.y\r\n\t\t\t) || (\r\n\t\t\t\tthis.position.y < rect.position.y + rect.height &&\r\n\t\t\t\tthis.position.y + this.height > rect.position.y + rect.height\r\n\t\t\t)\r\n\t\t)\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * fromPoints()\r\n\t * @description creates a rectangle from two points\r\n\t * @param {Point} point1 the first point of the rectangle\r\n\t * @param {Point} point2 the second point of the rectangle\r\n\t */\r\n\tfromTwoPoints(point1, point2) {\r\n\t\tif(point1.x < point2.x) {\r\n\t\t\tthis._position.x = point1.x;\r\n\t\t} else {\r\n\t\t\tthis._position.x = point2.x;\r\n\t\t}\r\n\r\n\t\tif(point1.y > point2.y) {\r\n\t\t\tthis._position.y = point1.y;\r\n\t\t} else {\r\n\t\t\tthis._position.y = point2.y;\r\n\t\t}\r\n\r\n\t\tthis._width = Math.abs(point1.x - point2.x);\r\n\t\tthis._height = Math.abs(point1.y - point2.y);\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * fromFourPoints()\r\n\t * @description creates a rectangle from 4 points\r\n\t * @param {Array[Points]} points the array of 4 points\r\n\t */\r\n\tfromFourPoints(points) {\r\n\t\tvar minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\r\n\t\tfor (var i = 0; i < points.length; i++) {\r\n\t\t  var point = points[i];\r\n\t\t  minX = Math.min(minX, point.x);\r\n\t\t  minY = Math.min(minY, point.y);\r\n\t\t  maxX = Math.max(maxX, point.x);\r\n\t\t  maxY = Math.max(maxY, point.y);\r\n\t\t}\r\n\t\tthis._width = maxX - minX;\r\n\t\tthis._height = maxY - minY;\r\n\t\tthis._position.x = minX;\r\n\t\tthis._position.y = minY;\r\n\t}\r\n\r\n\t/**\r\n\t * toPoints()\r\n\t * @description converts this rectangle to points\r\n\t * @returns the points that make up this rectangle\r\n\t */\r\n\ttoPoints() {\r\n\t\treturn [\r\n\t\t\t{...this.position},\r\n\t\t\t{x: this.position.x + this.width, y: this.position.y},\r\n\t\t\t{x: this.position.x + this.width, y: this.position.y + this.height},\r\n\t\t\t{x: this.position.x, y: this.position.y + this.height}\r\n\t\t]\r\n\t}\r\n\r\n\r\n\t\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t * create()\r\n\t * @description creates the rect\r\n\t */\r\n\tcreate() {\r\n\t\t\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * update()\r\n\t * @description updates the attributes of the svg shape\r\n\t */\r\n\tupdate() {\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * destroy()\r\n\t * @description destroys the svg\r\n\t */\r\n\tdestroy() {\r\n\t\tthis._group.remove()\r\n\t}\r\n\r\n\r\n\t/**\r\n     * moveBy() \r\n     * @description moves the rectangle by a delta x, and y\r\n     * @param {Number} deltaX the difference in x to move the rectangle\r\n     * @param {Number} deltaY the difference in y to move the rectangle\r\n     */\r\n    moveBy(deltaX, deltaY) {\r\n        this._position.x += deltaX;\r\n        this._position.y += deltaY;\r\n    }\r\n\r\n\r\n\t/**\r\n\t * moveTo()\r\n\t * @description moves to a specific position\r\n\t * @param {Number} x the x value of the position\r\n\t * @param {Number} y the y value of the position\r\n\t */\r\n\tmoveTo(x, y) {\r\n\t\tlet points = this.toPoints(x, y);\r\n\t\tlet center = this.center\r\n\t\tfor (const point of points) {\r\n\t\t\tlet delta = {\r\n\t\t\t\tx: x - center.x,\r\n\t\t\t\ty: y - center.y\r\n\t\t\t}\r\n\r\n\t\t\tpoint.x += delta.x\r\n\t\t\tpoint.y += delta.y\r\n\t\t}\r\n\t\tthis.fromFourPoints(points);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * rotateAroundCenter()\r\n\t * @description rotates this rectangle around its center\r\n\t */\r\n\trotateAroundCenter(angle) {\r\n\t\tvar cx = this.position.x + this.width / 2; // center x coordinate\r\n\t\tvar cy = this.position.y + this.height / 2; // center y coordinate\r\n\t\tvar points = this.toPoints()\r\n\t\tvar rotatedPoints = (0,_Point__WEBPACK_IMPORTED_MODULE_0__.rotatePoints)(points, {x: cx, y: cy}, angle);\r\n\t\tthis.fromFourPoints(rotatedPoints);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * rotateAroundPoint() \r\n\t * @description rotates the rectangle around a point\r\n\t * @param {Point} point the point to rotate the rectangle around\r\n\t * @param {Degrees} angle the angle to rotate the rectangle by in degrees\r\n\t */\r\n\trotateAroundPoint(center, angle) {\r\n\t\tvar points = this.toPoints()\r\n\t\tthis.fromFourPoints((0,_Point__WEBPACK_IMPORTED_MODULE_0__.rotatePoints)(points, center, angle));\r\n\t}\r\n\r\n\t/**\r\n\t * getAreaOfIntersection()\r\n\t * @description get the area of intersection of two rectangles\r\n\t * @param {Rect} the rect to get the area of intersection with\r\n\t * @returns the area of intersection\r\n\t */\r\n\tgetAreaOfIntersection(otherRect) {  \r\n\t\treturn Math.max(\r\n\t\t\t\t0, \r\n\t\t\tMath.min(this.position.x + this.width, otherRect.position.x + otherRect.width)\r\n\t\t\t- Math.max(this.position.x, otherRect.position.x)\r\n\t\t ) * Math.max(\r\n\t\t\t  0, \r\n\t\t\tMath.min(this.position.y + this.height, otherRect.position.y + otherRect.height) \r\n\t\t\t- Math.max(this.position.y, otherRect.position.y)\r\n\t\t )\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * scale()\r\n\t * @description scales the rectangle by the given amount\r\n\t * @param {Number} amount the amount to scale the rectangle by\r\n\t */\r\n\tscale(amount) {\r\n\t\tlet newPoints = this.toPoints().map(point => {\r\n\t\t\treturn {\r\n\t\t\t\tx: amount * (point.x - this.center.x) + this.center.x,\r\n\t\t\t\ty: amount * (point.y - this.center.y) + this.center.y,\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.fromFourPoints(newPoints);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * scaleHeight()\r\n\t * @description scales the height by the given amount\r\n\t * @param {Number} amount the amount to scale the height by\r\n\t */\r\n\tscaleHeight(amount) {\r\n\t\tthis._height *= amount;\r\n\t}\r\n\r\n\t/**\r\n\t * scaleWidth()\r\n\t * @description scales the width by the given amount\r\n\t * @param {Number} amount the amount to scale the width by\r\n\t */\r\n\tscaleWidth(amount) {\r\n\t\tthis._width *= amount;\r\n\t}\r\n\r\n\r\n\r\n\t\r\n\r\n\t/**\r\n\t * get center()\r\n\t * @returns the center point of the rectangle\r\n\t */\r\n\tget center() {\r\n\t\treturn {\r\n\t\t\tx: this._position.x + this._width / 2,\r\n\t\t\ty: this._position.y + this._height / 2\r\n\t\t}\r\n\t}\r\n\t\r\n\r\n\t\r\n\r\n\t/**\r\n\t * get width()\r\n\t * @returns the width of the rect\r\n\t */\r\n\tget width() {\r\n\t\treturn this._width;\r\n\t}\r\n\r\n\t/**\r\n\t * set width()\r\n\t * @description set the width\r\n\t * @param {Number} value the value to set width to\r\n\t */\r\n\tset width(value) {\r\n\t\tthis._width = value;\r\n\t}\r\n\r\n\t/**\r\n\t * get height()\r\n\t * @returns the height of the rect\r\n\t */\r\n\tget height() {\r\n\t\treturn this._height;\r\n\t}\r\n\r\n\t/**\r\n\t * set height()\r\n\t * @description set the width\r\n\t * @param {Number} value the value to set width to\r\n\t */\r\n\tset height(value) {\r\n\t\tthis._height = value;\r\n\t}\r\n\r\n\t\r\n}\r\n\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/shapes/Rectangle.js?");

/***/ }),

/***/ "./src/js/shapes/Shape.js":
/*!********************************!*\
  !*** ./src/js/shapes/Shape.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Shape)\n/* harmony export */ });\n\r\n/**\r\n * Shape - a graphic shape\r\n */\r\nclass Shape {\r\n    constructor(position) {\r\n        this._position = position;\r\n        this._hidden = false;\r\n        // opacity is part of the color\r\n        this._fill = {\r\n\t\t\tcolor: \"orange\"\r\n\t\t};\r\n\t\tthis._stroke = {\r\n\t\t\tcolor: \"blue\",\r\n\t\t\twidth: 1\r\n\t\t};\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * draw()\r\n     * @description draws the player\r\n     * @param {CanvasRenderingContext2D} context the context to draw to\r\n     */\r\n    draw(context) {\r\n        context.fillStyle = this._fill.color;\r\n        context.strokeStyle = this._stroke.color;\r\n        context.lineWidth = this._stroke.width;\r\n    }\r\n\r\n\r\n\t/**\r\n\t * scale()\r\n\t * @description scales the rectangle by the given amount\r\n\t * @param {Number} amount the amount to scale the rectangle by\r\n\t */\r\n\tscale(amount) {}\r\n\r\n\r\n\t/**\r\n\t * scaleHeight()\r\n\t * @description scales the y dimension of all objects in the group\r\n\t * @param {Number} amount the amount to scale the y dimension by\r\n\t */\r\n\tscaleY(amount) {}\r\n\r\n\t/**\r\n\t * scaleWidth()\r\n\t * @description scales the x dimension of all objects in the group\r\n\t * @param {Number} amount the amount to scale the x dimension by\r\n\t */\r\n\tscaleX(amount) {}\r\n\r\n    /**\r\n\t * set fill()\r\n\t * @description sets the fill of the shape\r\n\t * @param {Object} value the object to set the fill to. The object has a color, and opacity values\r\n\t */\r\n\tset fill(value) {\r\n\t\tthis._fill = value;\r\n\t}\r\n\r\n\t/**\r\n\t * get fill()\r\n\t * @description gets the fill of this shape\r\n\t */\r\n\tget fill() {\r\n\t\treturn this._fill\r\n\t}\r\n\r\n\t/**\r\n\t * set stroke()\r\n\t * @description sets the stroke of the shape\r\n\t * @param {Object} value the object to set the stoke to. The object has a color, and width values\r\n\t */\r\n\tset stroke(value) {\r\n\t\tthis._stroke = value;\r\n\t}\r\n\r\n\t/**\r\n\t * get stroke()\r\n\t * @description gets the stroke of this shape\r\n\t */\r\n\tget stroke() {\r\n\t\treturn this._stroke\r\n\t}\r\n\r\n\r\n    /**\r\n\t * get position()\r\n\t * @returns the position of the shape\r\n\t */\r\n\tget position() {\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\t/**\r\n\t * set position()\r\n\t * @description sets the position of the shape\r\n\t */\r\n\tset position(value) {\r\n\t\tthis._position = value;\r\n\t}\r\n\r\n\t/**\r\n\t * get x()\r\n\t * @description gets the x position of the shape\r\n\t * @returns the x position of the shape\r\n\t */\r\n\tget x() {\r\n\t\treturn this._position.x;\r\n\t}\r\n\r\n\t/**\r\n\t * set x()\r\n\t * @description sets the x position of the shape\r\n\t * @param {Number} value the value to set x position\r\n\t */\r\n\tset x(value) {\r\n\t\tthis._position.x = value;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * get x()\r\n\t * @description gets the x position of the shape\r\n\t * @returns the x position of the shape\r\n\t */\r\n\tget y() {\r\n\t\treturn this._position.y;\r\n\t}\r\n\r\n\t/**\r\n\t * set y()\r\n\t * @description sets the y position of the shape\r\n\t * @param {Number} value the value to set y position\r\n\t */\r\n\tset y(value) {\r\n\t\tthis._position.y = value;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * hide()\r\n\t * @description hides the shape from view\r\n\t */\r\n\thide() {\r\n\t\tthis._hidden = true;\r\n\t}\r\n\r\n\t/**\r\n\t * show()\r\n\t * @description shows the shape\r\n\t */\r\n\tshow() {\r\n\t\tthis._hidden = false;\r\n\t}\r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/shapes/Shape.js?");

/***/ }),

/***/ "./src/js/shapes/Star.js":
/*!*******************************!*\
  !*** ./src/js/shapes/Star.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Star)\n/* harmony export */ });\n/* harmony import */ var _Shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Shape */ \"./src/js/shapes/Shape.js\");\n\r\n\r\nclass Star extends _Shape__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n\r\n    constructor(center, spikeCount, innerRadius, outerRadius) {\r\n        super(center);\r\n        this._spikeCount = spikeCount;\r\n        this._innerRadius = innerRadius;\r\n        this._outerRadius = outerRadius;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * draw()\r\n     * @description draws the star\r\n     * @param {CanvasRenderingContext2D} context the context to draw to\r\n     */\r\n    draw(context) {\r\n        super.draw(context);\r\n        var rotation = Math.PI / 2 * 3;\r\n        var x = this._position.x;\r\n        var y = this._position.y;\r\n        var step = Math.PI / this._spikeCount;\r\n\r\n        context.beginPath();\r\n        context.moveTo(this._position.x, this._position.y - this._outerRadius)\r\n        for (let i = 0; i < this._spikeCount; i++) {\r\n            x = this._position.x + Math.cos(rotation) * this._outerRadius;\r\n            y = this._position.y + Math.sin(rotation) * this._outerRadius;\r\n            context.lineTo(x, y)\r\n            rotation += step\r\n\r\n            x = this._position.x + Math.cos(rotation) * this._innerRadius;\r\n            y = this._position.y + Math.sin(rotation) * this._innerRadius;\r\n            context.lineTo(x, y)\r\n            rotation += step\r\n        }\r\n        context.lineTo(this._position.x, this._position.y - this._outerRadius);\r\n        context.closePath();\r\n        context.lineWidth = 5;\r\n        context.stroke();\r\n        context.fill();\r\n    }\r\n\r\n\r\n    /**\r\n     * toPoints()\r\n     * @description converts this shape to a list of points\r\n     */\r\n    toPoints() {\r\n        var rotation = Math.PI / 2 * 3;\r\n        var x = this._position.x;\r\n        var y = this._position.y;\r\n        var step = Math.PI / this._spikeCount;\r\n        let points = [];\r\n\r\n        points.push({\r\n            x: this._position.x, \r\n            y: this._position.y - this._outerRadius\r\n        });\r\n        for (let i = 0; i < this._spikeCount; i++) {\r\n            x = this._position.x + Math.cos(rotation) * this._outerRadius;\r\n            y = this._position.y + Math.sin(rotation) * this._outerRadius;\r\n            points.push({x, y})\r\n            rotation += step\r\n\r\n            x = this._position.x + Math.cos(rotation) * this._innerRadius;\r\n            y = this._position.y + Math.sin(rotation) * this._innerRadius;\r\n            points.push({x, y})\r\n            rotation += step\r\n        }\r\n        points.push({\r\n            x: this._position.x, \r\n            y: this._position.y - this._outerRadius\r\n        })\r\n\r\n        return points;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * get outerRadius()\r\n     * @description gets the outer radius\r\n     * @return {Number} outerRadius\r\n     */\r\n    get outerRadius() {\r\n        return this._outerRadius;\r\n    }\r\n\r\n    /**\r\n     * get innerRadius()\r\n     * @description gets the outer radius\r\n     * @return {Number} innerRadius\r\n     */\r\n    get innerRadius() {\r\n        return this._innerRadius;\r\n    }\r\n\r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/shapes/Star.js?");

/***/ }),

/***/ "./src/js/util.js":
/*!************************!*\
  !*** ./src/js/util.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getRandomInt\": () => (/* binding */ getRandomInt),\n/* harmony export */   \"getOpposite\": () => (/* binding */ getOpposite),\n/* harmony export */   \"getNextSide\": () => (/* binding */ getNextSide),\n/* harmony export */   \"dot\": () => (/* binding */ dot),\n/* harmony export */   \"normalize\": () => (/* binding */ normalize),\n/* harmony export */   \"overlap\": () => (/* binding */ overlap),\n/* harmony export */   \"project\": () => (/* binding */ project),\n/* harmony export */   \"getAreaOfIntersection\": () => (/* binding */ getAreaOfIntersection),\n/* harmony export */   \"swap\": () => (/* binding */ swap)\n/* harmony export */ });\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\r\n// Returns a random integer between min (included) and max (excluded)\r\n// Using Math.round() will give you a non-uniform distribution!\r\nfunction getRandomInt(min, max) {\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\n\r\n/*\r\n  Gets the opposite of the given side\r\n*/\r\nfunction getOpposite(side) {\r\n  \r\n  if(side === \"left\") {\r\n    return \"right\"\r\n  } else if(side === \"right\") {\r\n    return \"left\"\r\n  } else if(side === \"up\") {\r\n    return \"down\"\r\n  } else if(side === \"down\") {\r\n    return \"up\"\r\n  } else if(side === \"top\") {\r\n    return \"bottom\"\r\n  } else if(side === \"bottom\") {\r\n    return \"top\"; \r\n  } else if(side === \"start\") {\r\n    return \"end\";\r\n  } else if(side === \"end\") {\r\n    return \"start\";\r\n  } else {\r\n    return \"\"\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * getNextSide()\r\n * @description gets the next side going clockwise\r\n * @param {side} side the side to get the next side for\r\n */\r\nfunction getNextSide(side) {\r\n  let sideOrder = [\r\n    \"left\", \"up\", \"right\", \"down\"\r\n  ]\r\n  let currentIndex = sideOrder.indexOf(side)\r\n  return sideOrder[(currentIndex + 1) % sideOrder.length]\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * dot()\r\n * @description gets the dot product of the given vectors\r\n * @param {Vector} vertex1 the first vertex\r\n * @param {Vector} vertex2 the second vertex\r\n * @returns the dot product of the two vertices\r\n */\r\nfunction dot(vertex1, vertex2) {\r\n\treturn vertex1.x * vertex2.x + vertex1.y * vertex2.y;\r\n}\r\n\r\n/**\r\n * normalize()\r\n * @description normalizes a vector\r\n * @param {Vector} vector the vector to normalize\r\n * @returns the normalization vector\r\n */\r\nfunction normalize(vector) {\r\n\tlet length = Math.sqrt(\r\n    vector.x * vector.x + vector.y * vector.y\r\n  )\r\n  return {\r\n  \tx: vector.x / length,\r\n    y: vector.y / length\r\n  }\r\n}\r\n\r\n/**\r\n * overlap()\r\n * @description checks if two projections overlap\r\n * @param {Projection} proj1 the first projection\r\n * @param {Projection} proj2 the second projection\r\n * @returns true if both projections overlap\r\n *          otherwise false\r\n */\r\nfunction overlap(proj1, proj2) {\r\n\treturn (\r\n  \t(proj1.min < proj2.min && proj2.min < proj1.max) ||\r\n    (proj1.min < proj2.max && proj2.max < proj1.max) ||\r\n    (proj2.min < proj1.min && proj1.min < proj2.max) ||\r\n    (proj2.min < proj1.max && proj1.max < proj2.max)\r\n  )\r\n}\r\n\r\n/**\r\n * project()\r\n * @description projects a shape on to an axis\r\n * @param {Shape} shape the shape to project\r\n * @param {Axis} axis the axis to project onto   \r\n * @returns the projection\r\n */\r\nfunction project(shape, axis) {\r\n\tlet normalizedAxis = normalize(axis)\r\n\tlet vertices = shape.toPoints()\r\n  let min =  dot(normalizedAxis, vertices[0]);\r\n  let max = min;\r\n  for (let i = 1; i < vertices.length; i++) {\r\n    // NOTE: the axis must be normalized to get accurate projections\r\n    let p = dot(normalizedAxis, vertices[i]);\r\n    if (p < min) {\r\n      min = p;\r\n    } else if (p > max) {\r\n      max = p;\r\n    }\r\n  }\r\n  return {\r\n  \tmin, max\r\n  };\r\n}\r\n\r\n/**\r\n * getAreaOfIntersection()\r\n * @description finds the area of intersection between the two rectangles\r\n * @param {Rect} rect1 the first rectangle\r\n * @param {Rect} rect2 the second rectangle\r\n * @returns the area of intersection of the two rectangles\r\n */\r\nfunction getAreaOfIntersection(rect1, rect2) {  \r\n  console.log(rect1, rect2);\r\n  return Math.max(\r\n  \t\t0, \r\n      Math.min(rect1.position.x + rect1.width, rect2.position.x + rect2.width)\r\n      - Math.max(rect1.position.x, rect2.position.x)\r\n   ) * Math.max(\r\n    \t0, \r\n      Math.min(rect1.position.y + rect1.height, rect2.position.y + rect2.height) \r\n      - Math.max(rect1.position.y, rect2.position.y)\r\n   )\r\n}\r\n\r\n\r\n/**\r\n * swap()\r\n * @description swaps two array elements by index\r\n * @param {Array} array the array to swap the elements in\r\n * @param {Integer} index1 the index of the first element\r\n * @param {Integer} index2 teh index of the second element\r\n * @returns {Array} the array with the elements swapped\r\n */\r\nfunction swap(array, index1, index2) {\r\n  var temp = array[index2]\r\n  array[index2] = array[index1]\r\n  array[index1] = temp\r\n  return array;\r\n}\n\n//# sourceURL=webpack://hall-of-mirrors/./src/js/util.js?");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _js_Game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js/Game */ \"./src/js/Game.js\");\n\r\n\r\nlet game = new _js_Game__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n//# sourceURL=webpack://hall-of-mirrors/./src/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.js");
/******/ 	
/******/ })()
;